CODE EXTRACTION REPORT
Generated: 2025-08-29 17:26:14
Root Directory: D:\qiportal-dev\qiportal-client
Ignored Directories: dist, node_modules
Ignored Files: package-lock.json
================================================================================

DIRECTORY TREE STRUCTURE:
----------------------------------------
├── functions
│   └── api
├── kb-content
│   └── zy
│       ├── getting-started.md
│       └── process-optimization.md
├── public
│   ├── 404.html
│   ├── favicon.ico
│   ├── logo.png
│   └── logo.svg
├── scripts
│   ├── build-graph-index.mjs
│   ├── build-kb.js
│   ├── code_extractor.py
│   ├── directory_mapper.py
│   └── upload-kb.mjs
├── src
│   ├── components
│   │   ├── DocLayout.jsx
│   │   ├── FileUpload.jsx
│   │   ├── GraphView.jsx
│   │   ├── Header.jsx
│   │   ├── Hero.jsx
│   │   ├── NotificationCenter.jsx
│   │   ├── ProtectedRoute.jsx
│   │   ├── SiteHeader.jsx
│   │   ├── ThemeProvider.jsx
│   │   └── ThemeToggle.jsx
│   ├── context
│   │   └── UserContext.jsx
│   ├── lib
│   │   ├── api.js
│   │   ├── kbApi.js
│   │   ├── messagesApi.js
│   │   ├── staticKbApi.js
│   │   └── supabase.js
│   ├── pages
│   │   ├── AdminPanel.jsx
│   │   ├── Billing.jsx
│   │   ├── Calls.jsx
│   │   ├── Client.jsx
│   │   ├── ClientDash.jsx
│   │   ├── Dashboard.jsx
│   │   ├── Home.jsx
│   │   ├── KB.jsx
│   │   ├── Login.jsx
│   │   ├── Logout.jsx
│   │   ├── Messages.jsx
│   │   ├── MindMap.jsx
│   │   ├── NotFound.jsx
│   │   ├── Projects.jsx
│   │   ├── Settings.jsx
│   │   └── Support.jsx
│   ├── utils
│   │   └── auth.js
│   ├── App.jsx
│   ├── index.css
│   └── main.jsx
├── _headers
├── _redirects
├── check_policies.sql
├── code_extraction_2025-08-29_17-26-14.txt
├── code_extractor.py
├── eslint.config.js
├── IMPLEMENTATION_SUMMARY.md
├── index.html
├── kb-config.json
├── KB_DATABASE_SETUP.sql
├── LICENSE
├── MESSAGES_DATABASE_SETUP.sql
├── package-lock.json
├── package.json
├── postcss.config.js
├── README.md
├── setup_rls_policies.sql
├── simple_rls_fix.sql
├── SUPABASE_EMAIL_SETUP.md
├── SUPABASE_MIGRATION.md
├── SUPABASE_SETUP.md
├── tailwind.config.js
└── vite.config.js

================================================================================
STARTING FILE CONTENT EXTRACTION
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\check_policies.sql
TYPE: .sql
================================================================================

-- Check if RLS is enabled on tables
SELECT 
    schemaname,
    tablename,
    rowsecurity
FROM pg_tables 
WHERE tablename IN ('profiles', 'clients', 'client_memberships')
AND schemaname = 'public';

-- Check existing policies
SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE tablename IN ('profiles', 'clients', 'client_memberships')
AND schemaname = 'public';


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\check_policies.sql
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\code_extraction_2025-08-29_17-26-14.txt
TYPE: .txt
================================================================================



================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\code_extraction_2025-08-29_17-26-14.txt
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\code_extractor.py
TYPE: .py
================================================================================

import os
from datetime import datetime

def should_ignore_directory(dir_name):
    """Check if directory should be ignored."""
    ignore_dirs = ['dist', 'node_modules']
    return dir_name.lower() in [d.lower() for d in ignore_dirs]

def get_file_extension(file_name):
    """Get file extension for determining if it's a code file."""
    return os.path.splitext(file_name)[1].lower()

def is_code_file(file_name):
    """Check if file is likely a code file based on extension."""
    # Files to explicitly ignore
    ignore_files = ['package-lock.json']
    if file_name in ignore_files:
        return False
    
    code_extensions = {
        '.py', '.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.scss', '.sass',
        '.json', '.xml', '.yaml', '.yml', '.md', '.txt', '.sh', '.bat', '.ps1',
        '.vue', '.php', '.java', '.cpp', '.c', '.h', '.hpp', '.cs', '.rb',
        '.go', '.rs', '.swift', '.kt', '.scala', '.r', '.sql', '.pl', '.lua',
        '.config.js'  # Include config.js files
    }
    
    # Check for exact extension match
    if get_file_extension(file_name) in code_extensions:
        return True
    
    # Special check for .config.js files
    if file_name.endswith('.config.js'):
        return True
    
    return False

def print_directory_tree(root_dir, output_file, current_depth=0, prefix=''):
    """Recursively prints the directory tree structure and writes to output file."""
    
    try:
        # Get the list of items in the directory
        items = os.listdir(root_dir)
    except PermissionError:
        message = prefix + "└── [Permission Denied]"
        print(message)
        output_file.write(message + "\n")
        return
    except FileNotFoundError:
        message = prefix + "└── [Directory Not Found]"
        print(message)
        output_file.write(message + "\n")
        return

    # Sort items: directories first, then files
    items = sorted(items, key=lambda s: s.lower())
    directories = [item for item in items if os.path.isdir(os.path.join(root_dir, item))]
    files = [item for item in items if not os.path.isdir(os.path.join(root_dir, item))]

    # Filter out ignored directories and hidden files/directories
    directories = [item for item in directories if not should_ignore_directory(item) and not item.startswith('.')]
    files = [item for item in files if not item.startswith('.')]

    # Combine directories and files
    items = directories + files

    for index, item in enumerate(items):
        path = os.path.join(root_dir, item)
        
        # Determine tree connector style
        if index == len(items) - 1:
            connector = '└── '
            extension = '    '
        else:
            connector = '├── '
            extension = '│   '

        # Print and write to file
        message = prefix + connector + item
        print(message)
        output_file.write(message + "\n")

        # Recurse into directories (excluding ignored ones)
        if os.path.isdir(path):
            print_directory_tree(path, output_file, current_depth + 1, prefix + extension)

def extract_file_content(file_path, output_file):
    """Extract and write file content with header."""
    try:
        # Create header
        header = f"\n{'='*80}\n"
        header += f"FILE: {file_path}\n"
        header += f"TYPE: {get_file_extension(file_path)}\n"
        header += f"{'='*80}\n\n"
        
        print(header)
        output_file.write(header)
        
        # Read and write file content
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            print(content)
            output_file.write(content)
            
        # Add footer
        footer = f"\n\n{'='*80}\nEND OF FILE: {file_path}\n{'='*80}\n\n"
        print(footer)
        output_file.write(footer)
        
    except Exception as e:
        error_msg = f"\nERROR READING FILE {file_path}: {str(e)}\n"
        print(error_msg)
        output_file.write(error_msg)

def scan_and_extract_files(root_dir, output_file):
    """Scan directory tree and extract content from all code files."""
    print(f"\n{'='*80}")
    print("STARTING FILE CONTENT EXTRACTION")
    print(f"{'='*80}\n")
    output_file.write(f"\n{'='*80}\n")
    output_file.write("STARTING FILE CONTENT EXTRACTION\n")
    output_file.write(f"{'='*80}\n\n")
    
    file_count = 0
    
    for root, dirs, files in os.walk(root_dir):
        # Filter out ignored directories from traversal
        dirs[:] = [d for d in dirs if not should_ignore_directory(d) and not d.startswith('.')]
        
        # Filter out hidden files and sort for consistent order
        files = [f for f in files if not f.startswith('.')]
        files = sorted(files, key=lambda s: s.lower())
        
        for file_name in files:
            file_path = os.path.join(root, file_name)
            
            # Only process code files
            if is_code_file(file_name):
                extract_file_content(file_path, output_file)
                file_count += 1
    
    return file_count

def main():
    """Main function to run the code extraction."""
    # Get the project root (current working directory)
    root_dir = os.getcwd()
    
    # Create output file in root directory
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_filename = f"code_extraction_{timestamp}.txt"
    output_path = os.path.join(root_dir, output_filename)
    
    print(f"Starting code extraction from: {root_dir}")
    print(f"Output will be saved to: {output_path}")
    print(f"Ignoring directories: dist, node_modules")
    print(f"Ignoring files: package-lock.json")
    print(f"{'='*80}\n")
    
    with open(output_path, 'w', encoding='utf-8') as output_file:
        # Write header information
        header_info = f"CODE EXTRACTION REPORT\n"
        header_info += f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        header_info += f"Root Directory: {root_dir}\n"
        header_info += f"Ignored Directories: dist, node_modules\n"
        header_info += f"Ignored Files: package-lock.json\n"
        header_info += f"{'='*80}\n\n"
        
        print(header_info)
        output_file.write(header_info)
        
        # Print directory tree
        print("DIRECTORY TREE STRUCTURE:")
        print("-" * 40)
        output_file.write("DIRECTORY TREE STRUCTURE:\n")
        output_file.write("-" * 40 + "\n")
        
        print_directory_tree(root_dir, output_file)
        
        # Extract file contents
        file_count = scan_and_extract_files(root_dir, output_file)
        
        # Write footer
        footer = f"\n{'='*80}\n"
        footer += f"EXTRACTION COMPLETE\n"
        footer += f"Total files processed: {file_count}\n"
        footer += f"Output saved to: {output_path}\n"
        footer += f"{'='*80}\n"
        
        print(footer)
        output_file.write(footer)
    
    print(f"\nCode extraction completed successfully!")
    print(f"Output saved to: {output_path}")

if __name__ == "__main__":
    main()


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\code_extractor.py
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\eslint.config.js
TYPE: .js
================================================================================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\eslint.config.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\IMPLEMENTATION_SUMMARY.md
TYPE: .md
================================================================================

# QiAlly Portal Implementation Summary

## Issues Addressed

### 1. **Supabase Email Configuration Issue** ✅

**Problem**: Email confirmation not being sent during signup.

**Solution**: 
- Created `SUPABASE_EMAIL_SETUP.md` with detailed configuration steps
- Need to configure SMTP settings in Supabase dashboard
- Set up email templates for confirmation, password reset, and magic links

**Steps to Fix**:
1. Go to Supabase Dashboard → Authentication → Settings
2. Configure SMTP settings with your email provider
3. Set up email templates
4. Test the configuration

### 2. **Knowledge Base Client Access** ✅

**Problem**: Need client-specific KB access and static site builds.

**Solution Implemented**:
- Created `src/lib/kbApi.js` with client-specific functions
- Updated `src/pages/KB.jsx` to use real API
- Created `KB_DATABASE_SETUP.sql` for database schema
- Added client slug mapping in user profiles

**Key Features**:
- `getClientSlug()` - Determines client access based on user profile
- `listDocs(clientSlug)` - Lists documents for specific client
- `getSignedUrl(path)` - Gets secure URLs for document access
- Row Level Security (RLS) policies for data protection

**Database Schema**:
```sql
-- KB files table with client-specific access
CREATE TABLE kb_files (
  id UUID PRIMARY KEY,
  client_slug TEXT NOT NULL,
  path TEXT NOT NULL,
  title TEXT NOT NULL,
  tags TEXT[],
  visibility TEXT DEFAULT 'client'
);
```

### 3. **Messages Functionality** ✅

**Problem**: Messages system was just stubs, needed real functionality.

**Solution Implemented**:
- Created `src/lib/messagesApi.js` with real-time messaging
- Created `MESSAGES_DATABASE_SETUP.sql` for chat system
- Updated `src/pages/Messages.jsx` to use real API
- Added real-time subscriptions with Supabase

**Key Features**:
- Real-time messaging with Supabase subscriptions
- Conversation management
- Message history
- Read status tracking
- Auto-scroll to latest messages

**Database Schema**:
```sql
-- Conversations, participants, and messages tables
CREATE TABLE conversations (id, title, created_by, created_at, updated_at);
CREATE TABLE conversation_participants (conversation_id, user_id, last_read_at);
CREATE TABLE messages (conversation_id, sender_id, content, created_at);
```

## What's Working Now

### ✅ **Settings Page**
- Profile information editing
- Notification preferences
- Timezone and locale settings
- Real database integration with Supabase

### ✅ **Messages System**
- Real-time chat functionality
- Conversation creation and management
- Message sending and receiving
- Auto-scroll and read status

### ✅ **Knowledge Base**
- Client-specific access
- Document listing and viewing
- Search functionality
- Secure file access

### ✅ **Authentication**
- Email/password signup and login
- Session management
- Role-based access control

## Next Steps for Full Functionality

### 1. **Complete Messages UI Updates**
The Messages page needs these UI updates:
```javascript
// Update conversation list rendering
{conversations.map((conversation) => (
  <div key={conversation.id} onClick={() => handleConversationSelect(conversation)}>
    <h4>{conversation.title}</h4>
    <p>{formatTime(conversation.updated_at)}</p>
  </div>
))}

// Update messages rendering
{messages.map((message) => {
  const isOwnMessage = message.sender_id === currentUserId;
  return (
    <div className={isOwnMessage ? 'justify-end' : 'justify-start'}>
      <p>{message.content}</p>
      <span>{formatTime(message.created_at)}</span>
    </div>
  );
})}
```

### 2. **Database Setup Required**
Run these SQL files in Supabase:
1. `KB_DATABASE_SETUP.sql` - For knowledge base system
2. `MESSAGES_DATABASE_SETUP.sql` - For messaging system
3. Update existing `profiles` table with `client_slug` column

### 3. **Storage Setup**
Create Supabase storage bucket:
- Bucket name: `kb`
- Public: false
- File size limit: 50MB
- Allowed types: markdown, images, PDFs

### 4. **Environment Variables**
Ensure these are set:
```env
VITE_SUPABASE_URL=your_supabase_project_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
```

## Priority Implementation Order

1. **Fix Supabase Email** (Critical for signup)
   - Follow `SUPABASE_EMAIL_SETUP.md`
   - Test with new user signup

2. **Set up Database** (Required for functionality)
   - Run SQL setup files
   - Create storage bucket
   - Test data access

3. **Complete Messages UI** (High priority)
   - Update conversation list rendering
   - Update message display
   - Add new conversation modal

4. **Test KB Access** (Medium priority)
   - Upload sample documents
   - Test client-specific access
   - Verify search functionality

## Testing Checklist

- [ ] Email confirmation works during signup
- [ ] Users can log in and access their dashboard
- [ ] Messages can be sent and received in real-time
- [ ] Knowledge base shows client-specific documents
- [ ] Settings can be updated and saved
- [ ] Role-based access works correctly

## Files Created/Modified

**New Files**:
- `SUPABASE_EMAIL_SETUP.md`
- `KB_DATABASE_SETUP.sql`
- `MESSAGES_DATABASE_SETUP.sql`
- `src/lib/kbApi.js`
- `src/lib/messagesApi.js`
- `IMPLEMENTATION_SUMMARY.md`

**Modified Files**:
- `src/pages/KB.jsx` - Added client-specific access
- `src/pages/Messages.jsx` - Added real-time messaging
- `src/pages/Settings.jsx` - Already working with database

## Support

For any issues:
1. Check Supabase dashboard for errors
2. Verify environment variables are set
3. Run database setup scripts
4. Test with different user roles


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\IMPLEMENTATION_SUMMARY.md
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\index.html
TYPE: .html
================================================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    
    <!-- Basic Meta -->
    <title>QiAlly — Empowering Systems That Breathe</title>
    <meta name="description" content="QiAlly™ helps you transform chaos into clarity with modular systems, client portals, and operational revival." />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta id="robots-meta" name="robots" content="noindex, nofollow" />
    <meta name="author" content="QiAlly" />

    <!-- Open Graph / Social -->
    <meta property="og:title" content="QiAlly™ | Systems That Breathe" />
    <meta property="og:description" content="The QiSuite™ Portal is live. Full website coming soon." />
    <meta id="og-image" property="og:image" content="https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png" />
    <meta id="og-url" property="og:url" content="https://portal.qially.com/" />
    <meta name="twitter:card" content="summary_large_image" />

    <!-- Favicon -->
    <link rel="icon" href="https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png" type="image/png" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
    
    <!-- Host-aware meta for SEO -->
    <script>
      const host = window.location.hostname;
      const robots = document.getElementById("robots-meta");
      const ogUrl = document.getElementById("og-url");
      const ogImg = document.getElementById("og-image");

      if (host === "qially.com" || host === "www.qially.com") {
        robots?.setAttribute("content", "index, follow");
        ogUrl?.setAttribute("content", "https://qially.com/");
        ogImg?.setAttribute("content", "https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png");
      } else {
        robots?.setAttribute("content", "noindex, nofollow");
        ogUrl?.setAttribute("content", "https://portal.qially.com/");
        ogImg?.setAttribute("content", "https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png");
      }
    </script>
  </body>
</html>


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\index.html
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\kb-config.json
TYPE: .json
================================================================================

{
  "clients": {
    "zy": {
      "name": "QiAlly",
      "members": [
        "info@qially.me",
        "client1@email.com",
        "admin@qially.me"
      ],
      "public": false,
      "description": "QiAlly internal knowledge base"
    },
    "client-a": {
      "name": "Client A",
      "members": [
        "clienta@example.com",
        "admin@clienta.com"
      ],
      "public": false,
      "description": "Client A knowledge base"
    },
    "client-b": {
      "name": "Client B", 
      "members": [
        "clientb@example.com",
        "manager@clientb.com"
      ],
      "public": false,
      "description": "Client B knowledge base"
    }
  },
  "global": {
    "admins": [
      "admin@qially.me",
      "info@qially.me"
    ],
    "defaultClient": "zy"
  }
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\kb-config.json
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\KB_DATABASE_SETUP.sql
TYPE: .sql
================================================================================

-- Knowledge Base Database Setup
-- Run this in your Supabase SQL Editor

-- 1. Create KB files table
CREATE TABLE IF NOT EXISTS kb_files (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  client_slug TEXT NOT NULL,
  path TEXT NOT NULL,
  title TEXT NOT NULL,
  tags TEXT[] DEFAULT '{}',
  visibility TEXT DEFAULT 'client',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(client_slug, path)
);

-- 2. Create index for faster queries
CREATE INDEX IF NOT EXISTS idx_kb_files_client_slug ON kb_files(client_slug);
CREATE INDEX IF NOT EXISTS idx_kb_files_tags ON kb_files USING GIN(tags);

-- 3. Enable Row Level Security
ALTER TABLE kb_files ENABLE ROW LEVEL SECURITY;

-- 4. Create RLS policies
-- Users can view KB files for their client
CREATE POLICY "Users can view their client KB files" ON kb_files
  FOR SELECT USING (
    client_slug IN (
      SELECT client_slug FROM profiles 
      WHERE email = auth.jwt() ->> 'email'
    )
    OR 
    'admin' IN (
      SELECT role FROM profiles 
      WHERE email = auth.jwt() ->> 'email'
    )
  );

-- Admins can manage all KB files
CREATE POLICY "Admins can manage all KB files" ON kb_files
  FOR ALL USING (
    'admin' IN (
      SELECT role FROM profiles 
      WHERE email = auth.jwt() ->> 'email'
    )
  );

-- 5. Update profiles table to include client_slug
-- Add client_slug column if it doesn't exist
DO $$ 
BEGIN
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                 WHERE table_name = 'profiles' AND column_name = 'client_slug') THEN
    ALTER TABLE profiles ADD COLUMN client_slug TEXT;
  END IF;
END $$;

-- 6. Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 7. Create trigger for updated_at
CREATE TRIGGER update_kb_files_updated_at 
    BEFORE UPDATE ON kb_files 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- 8. Insert sample data for testing
INSERT INTO kb_files (client_slug, path, title, tags, visibility) VALUES
('zy', 'clients/zy/docs/getting-started.md', 'Getting Started', ARRAY['guide', 'onboarding'], 'client'),
('zy', 'clients/zy/docs/process-optimization.md', 'Process Optimization Guide', ARRAY['process', 'optimization'], 'client'),
('zy', 'clients/zy/docs/faq.md', 'Frequently Asked Questions', ARRAY['faq', 'help'], 'client')
ON CONFLICT (client_slug, path) DO NOTHING;

-- 9. Update existing profiles with client_slug (if needed)
UPDATE profiles 
SET client_slug = 'zy' 
WHERE email IN ('info@qially.me', 'client1@email.com') 
AND client_slug IS NULL;

-- 10. Create storage bucket for KB files (if not exists)
-- Note: This needs to be done in the Supabase dashboard under Storage
-- Bucket name: 'kb'
-- Public bucket: false
-- File size limit: 50MB
-- Allowed MIME types: text/markdown, text/plain, image/*, application/pdf


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\KB_DATABASE_SETUP.sql
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\MESSAGES_DATABASE_SETUP.sql
TYPE: .sql
================================================================================

-- Messages/Chat System Database Setup
-- Run this in your Supabase SQL Editor

-- 1. Create conversations table
CREATE TABLE IF NOT EXISTS conversations (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT NOT NULL,
  created_by UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Create conversation participants table
CREATE TABLE IF NOT EXISTS conversation_participants (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  conversation_id UUID REFERENCES conversations(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  last_read_at TIMESTAMP WITH TIME ZONE,
  UNIQUE(conversation_id, user_id)
);

-- 3. Create messages table
CREATE TABLE IF NOT EXISTS messages (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  conversation_id UUID REFERENCES conversations(id) ON DELETE CASCADE,
  sender_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_conversation_participants_conversation_id ON conversation_participants(conversation_id);
CREATE INDEX IF NOT EXISTS idx_conversation_participants_user_id ON conversation_participants(user_id);
CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);
CREATE INDEX IF NOT EXISTS idx_messages_sender_id ON messages(sender_id);
CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);

-- 5. Enable Row Level Security
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;
ALTER TABLE conversation_participants ENABLE ROW LEVEL SECURITY;
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;

-- 6. Create RLS policies for conversations
-- Users can view conversations they participate in
CREATE POLICY "Users can view their conversations" ON conversations
  FOR SELECT USING (
    id IN (
      SELECT conversation_id FROM conversation_participants 
      WHERE user_id = auth.uid()
    )
  );

-- Users can create conversations
CREATE POLICY "Users can create conversations" ON conversations
  FOR INSERT WITH CHECK (auth.uid() = created_by);

-- Users can update conversations they created
CREATE POLICY "Users can update their conversations" ON conversations
  FOR UPDATE USING (auth.uid() = created_by);

-- 7. Create RLS policies for conversation_participants
-- Users can view participants of conversations they're in
CREATE POLICY "Users can view conversation participants" ON conversation_participants
  FOR SELECT USING (
    conversation_id IN (
      SELECT conversation_id FROM conversation_participants 
      WHERE user_id = auth.uid()
    )
  );

-- Users can join conversations (with some restrictions)
CREATE POLICY "Users can join conversations" ON conversation_participants
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update their own participation
CREATE POLICY "Users can update their participation" ON conversation_participants
  FOR UPDATE USING (auth.uid() = user_id);

-- 8. Create RLS policies for messages
-- Users can view messages in conversations they participate in
CREATE POLICY "Users can view messages" ON messages
  FOR SELECT USING (
    conversation_id IN (
      SELECT conversation_id FROM conversation_participants 
      WHERE user_id = auth.uid()
    )
  );

-- Users can send messages to conversations they participate in
CREATE POLICY "Users can send messages" ON messages
  FOR INSERT WITH CHECK (
    auth.uid() = sender_id AND
    conversation_id IN (
      SELECT conversation_id FROM conversation_participants 
      WHERE user_id = auth.uid()
    )
  );

-- Users can update their own messages
CREATE POLICY "Users can update their messages" ON messages
  FOR UPDATE USING (auth.uid() = sender_id);

-- 9. Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 10. Create triggers for updated_at
CREATE TRIGGER update_conversations_updated_at 
    BEFORE UPDATE ON conversations 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_messages_updated_at 
    BEFORE UPDATE ON messages 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- 11. Insert sample data for testing
-- Create a sample conversation
INSERT INTO conversations (title, created_by) VALUES
('Process Optimization Updates', (SELECT id FROM auth.users WHERE email = 'admin@qially.me' LIMIT 1))
ON CONFLICT DO NOTHING;

-- Add participants to the conversation
INSERT INTO conversation_participants (conversation_id, user_id)
SELECT 
  c.id,
  u.id
FROM conversations c
CROSS JOIN auth.users u
WHERE c.title = 'Process Optimization Updates'
  AND u.email IN ('admin@qially.me', 'info@qially.me')
ON CONFLICT DO NOTHING;

-- Add sample messages
INSERT INTO messages (conversation_id, sender_id, content)
SELECT 
  c.id,
  u.id,
  'Hi! I wanted to update you on the process optimization project.'
FROM conversations c
JOIN auth.users u ON u.email = 'admin@qially.me'
WHERE c.title = 'Process Optimization Updates'
ON CONFLICT DO NOTHING;

-- 12. Create view for easier querying
CREATE OR REPLACE VIEW conversation_summary AS
SELECT 
  c.id,
  c.title,
  c.created_at,
  c.updated_at,
  COUNT(DISTINCT cp.user_id) as participant_count,
  COUNT(m.id) as message_count,
  MAX(m.created_at) as last_message_at
FROM conversations c
LEFT JOIN conversation_participants cp ON c.id = cp.conversation_id
LEFT JOIN messages m ON c.id = m.conversation_id
GROUP BY c.id, c.title, c.created_at, c.updated_at;


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\MESSAGES_DATABASE_SETUP.sql
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\package.json
TYPE: .json
================================================================================

{
  "name": "qiportal-client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build && node -e \"require('fs').copyFileSync('dist/index.html','dist/404.html')\"",
    "build:kb": "node scripts/build-kb.js",
    "build:all": "npm run build:kb && npm run build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/auth-ui-react": "^0.4.7",
    "@supabase/auth-ui-shared": "^0.1.8",
    "@supabase/supabase-js": "^2.56.0",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/cli": "^4.1.12",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@tailwindcss/typography": "^0.5.16",
    "cytoscape": "^3.33.1",
    "dagre": "^0.8.5",
    "fast-glob": "^3.3.3",
    "fuse.js": "^7.1.0",
    "gray-matter": "^4.0.3",
    "mime": "^4.0.7",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-markdown": "^10.1.0",
    "react-router-dom": "^7.8.2",
    "remark-gfm": "^4.0.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "vite": "^7.1.2"
  }
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\package.json
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\postcss.config.js
TYPE: .js
================================================================================

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\postcss.config.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\README.md
TYPE: .md
================================================================================

# QiAlly Portal 🌟

> **Systems That Breathe** — Transforming chaos into clarity through modular systems, client portals, and operational revival.

[![React](https://img.shields.io/badge/React-19.1.1-61dafb?logo=react&logoColor=white)](https://reactjs.org/)
[![Vite](https://img.shields.io/badge/Vite-7.1.2-646cff?logo=vite&logoColor=white)](https://vitejs.dev/)
[![TailwindCSS](https://img.shields.io/badge/Tailwind-3.4.17-38bdf8?logo=tailwindcss&logoColor=white)](https://tailwindcss.com/)
[![Supabase](https://img.shields.io/badge/Auth-Supabase-3ECF8E?logo=supabase&logoColor=white)](https://supabase.com/auth)

## 🚀 Overview

QiAlly Portal is a modern client portal and business operations platform that helps small teams transform their operational chaos into streamlined, breathing systems. Built with React and powered by Supabase's secure infrastructure, it provides role-based access to business intelligence, project management, and operational tools.

### 🎯 Mission
**"Systems That Breathe"** — We believe business systems should be living, adaptive, and effortless to use. The QiAlly Portal embodies this philosophy by providing intuitive interfaces that grow with your business.

## ✨ Features

### 🏠 **Public Landing Page**
- **Modern Design**: Beautiful, responsive design with gradient effects and smooth animations
- **Service Showcase**: Comprehensive overview of consulting services and expertise
- **Case Studies**: Real-world success stories with quantified results
- **Client Testimonials**: Social proof from satisfied clients
- **Contact Integration**: Direct email integration for inquiries

### 🔐 **Secure Authentication**
- **Supabase Auth Integration**: Built-in authentication with email/password
- **JWT Token Management**: Secure session handling with automatic token validation
- **Role-Based Access**: Granular permissions for different user types

### 👥 **Role-Based Dashboards**

#### **Client Dashboard**
- **Project Overview**: Active projects, pending tasks, and completion metrics
- **Real-time Activity Feed**: Recent updates and milestones
- **Performance Metrics**: Visual KPIs and progress tracking
- **Secure Document Access**: Protected file sharing and collaboration

#### **Admin Panel**
- **System Monitoring**: User activity, session management, and system health
- **User Management**: Role assignments and access control
- **Analytics Dashboard**: Business intelligence and reporting tools
- **Quick Actions**: Streamlined administrative tasks

### 🎨 **User Experience**
- **Dark/Light Theme Toggle**: Personalized viewing preferences
- **Responsive Design**: Seamless experience across all devices
- **Glass Morphism UI**: Modern, clean interface with depth and clarity
- **Smooth Animations**: Engaging micro-interactions and transitions

## 🛠 Tech Stack

### **Frontend**
- **React 19.1.1** - Latest React with concurrent features
- **React Router 7.8.2** - Modern client-side routing
- **Vite 7.1.2** - Lightning-fast build tool and dev server
- **TailwindCSS 3.4.17** - Utility-first CSS framework

### **Authentication & Security**
- **Supabase Auth** - Built-in authentication with email/password
- **JWT Tokens** - Secure session management
- **Protected Routes** - Role-based access control

### **Development Tools**
- **ESLint** - Code quality and consistency
- **PostCSS** - CSS processing and optimization
- **Autoprefixer** - Cross-browser compatibility

## 🏗 Architecture

```
qiportal-client/
├── src/
│   ├── components/          # Reusable UI components
│   │   ├── ProtectedRoute.jsx   # Auth guard component
│   │   ├── ThemeProvider.jsx    # Theme management
│   │   └── ...
│   ├── pages/              # Route components
│   │   ├── Home.jsx            # Landing page
│   │   ├── Dashboard.jsx       # Client dashboard
│   │   ├── AdminPanel.jsx      # Admin interface
│   │   └── ...
│   ├── context/            # React context providers
│   │   └── UserContext.jsx     # User state management
│   ├── utils/              # Utility functions
│   │   └── auth.js             # Authentication helpers
│   └── lib/                # API and external integrations
├── lib/                    # External integrations
│   ├── supabase.js         # Supabase client configuration
│   └── api.js              # API utilities
├── public/                 # Static assets
└── scripts/                # Development utilities
```

## 🚦 Getting Started

### Prerequisites
- **Node.js** (v18 or higher)
- **npm** or **yarn**
- **Supabase account** (for authentication and database)

### Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/your-org/qiportal-client.git
   cd qiportal-client
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Start development server**
   ```bash
   npm run dev
   ```

4. **Open your browser**
   Navigate to `http://localhost:5173`

### Available Scripts

```bash
npm run dev      # Start development server
npm run build    # Build for production
npm run preview  # Preview production build
npm run lint     # Run ESLint
```

## 🌐 Deployment

This application is optimized for deployment on **Cloudflare Pages** with seamless integration to Supabase for authentication and data storage.

### Environment Setup
1. Create a Supabase project at [supabase.com](https://supabase.com)
2. Get your project URL and anon key from the project settings
3. Create a `.env` file with:
   ```
   VITE_SUPABASE_URL=your_supabase_project_url
   VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
   ```

### Cloudflare Pages Deployment
1. Connect your GitHub repository to Cloudflare Pages
2. Set build command: `npm run build`
3. Set output directory: `dist`
4. Add environment variables in Cloudflare Pages settings

## 🎨 Design System

### **Color Palette**
- **Primary**: Blue to Purple gradient (`from-blue-500 to-purple-500`)
- **Secondary**: Cyan accents (`cyan-500`)
- **Neutral**: Gray scale with proper contrast ratios
- **Glass Effects**: Subtle transparency with backdrop blur

### **Typography**
- **Headings**: Bold, gradient text effects
- **Body**: Clean, readable sans-serif
- **Interactive**: Hover states and transitions

### **Components**
- **Buttons**: Multiple variants (primary, ghost, outlined)
- **Cards**: Glass morphism with subtle shadows
- **Forms**: Consistent styling with validation states

## 📊 Business Impact

### **Proven Results**
- **500+** Clients & Partners served
- **20+** Years of combined experience
- **80+** Solutions & Processes implemented
- **40%** Average process time reduction
- **60%** Onboarding efficiency improvement
- **$250K+** Annual savings uncovered through optimization

### **Services Offered**
- **Management & Operations** - Streamline daily operations
- **Process Improvement** - Optimize workflows and eliminate waste
- **HR & Workforce Optimization** - Enhance team productivity
- **Financial Acumen** - Improve financial processes and reporting
- **Technology & Systems Integration** - Connect and automate systems

## 🤝 Contributing

We welcome contributions! Please see our contributing guidelines for details on how to submit pull requests, report issues, and suggest improvements.

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 📞 Contact

**QiAlly Team**
- **Email**: [info@qially.me](mailto:info@qially.me)
- **Website**: [https://portal.qially.com](https://portal.qially.com)

---

<div align="center">
  <strong>Built with ❤️ by the QiAlly Team</strong><br>
  <em>Creating systems that breathe, one client at a time.</em>
</div>


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\README.md
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\setup_rls_policies.sql
TYPE: .sql
================================================================================

-- Enable RLS on all tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE client_memberships ENABLE ROW LEVEL SECURITY;

-- Drop any existing policies to avoid conflicts
DROP POLICY IF EXISTS "Users can view own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Users can insert own profile" ON profiles;
DROP POLICY IF EXISTS "Authenticated users can view clients" ON clients;
DROP POLICY IF EXISTS "Users can view own memberships" ON client_memberships;

-- Profiles table policies
CREATE POLICY "Users can view own profile" ON profiles
FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON profiles
FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can insert own profile" ON profiles
FOR INSERT WITH CHECK (auth.uid() = id);

-- Allow users to update specific fields in their profile
CREATE POLICY "Users can update profile fields" ON profiles
FOR UPDATE USING (auth.uid() = id)
WITH CHECK (auth.uid() = id);

-- Clients table policies (allow authenticated users to view)
CREATE POLICY "Authenticated users can view clients" ON clients
FOR SELECT USING (auth.role() = 'authenticated');

-- Client memberships policies
CREATE POLICY "Users can view own memberships" ON client_memberships
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own memberships" ON client_memberships
FOR INSERT WITH CHECK (auth.uid() = user_id);


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\setup_rls_policies.sql
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\simple_rls_fix.sql
TYPE: .sql
================================================================================

-- Simple fix: Temporarily disable RLS to test if that's the issue
ALTER TABLE profiles DISABLE ROW LEVEL SECURITY;
ALTER TABLE clients DISABLE ROW LEVEL SECURITY;
ALTER TABLE client_memberships DISABLE ROW LEVEL SECURITY;

-- If you want to re-enable later with simple policies:
-- ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY "Enable all for authenticated users" ON profiles FOR ALL USING (auth.role() = 'authenticated');


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\simple_rls_fix.sql
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\SUPABASE_EMAIL_SETUP.md
TYPE: .md
================================================================================

# Supabase Email Configuration Fix

## Issue: Email confirmation not being sent during signup

### Steps to Fix in Supabase Dashboard:

1. **Go to Authentication Settings**
   - Navigate to your Supabase project dashboard
   - Go to **Authentication** → **Settings**

2. **Configure Email Provider**
   - In the **Email Templates** section, ensure email templates are set up
   - Go to **Email Templates** tab
   - Configure the following templates:
     - **Confirm signup**
     - **Reset password**
     - **Magic link**

3. **Set up SMTP with Cloudflare Email**
   - Go to **Authentication** → **Settings** → **SMTP Settings**
   - Enable SMTP and configure with Cloudflare:
     - **Host**: smtp.cloudflare.com
     - **Port**: 587 (or 465 for SSL)
     - **Username**: your-email@yourdomain.com (the email you set up in Cloudflare)
     - **Password**: Your Cloudflare email password or app-specific password
     - **Sender name**: QiAlly Support
     - **Sender email**: support@qially.me (or your verified domain email)

4. **Alternative: Use Supabase's built-in email service**
   - If you don't want to set up SMTP, ensure the built-in email service is enabled
   - Go to **Authentication** → **Settings** → **Email Auth**
   - Make sure **Enable email confirmations** is checked
   - Set **Secure email change** to enabled

5. **Test the Configuration**
   - Go to **Authentication** → **Users**
   - Try creating a test user
   - Check if confirmation email is sent

### Environment Variables to Check:
Make sure these are set in your `.env` file:
```env
VITE_SUPABASE_URL=your_supabase_project_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
```

### Cloudflare Email Setup Steps:
1. **Set up Cloudflare Email Routing**:
   - Go to Cloudflare Dashboard → Email → Email Routing
   - Add your domain and verify ownership
   - Create email addresses (e.g., support@qially.me, noreply@qially.me)

2. **Configure DNS Records**:
   - Cloudflare will automatically add the necessary MX, SPF, and DKIM records
   - Ensure these records are active in your DNS

3. **Test Email Delivery**:
   - Send a test email from Cloudflare dashboard
   - Check spam/junk folders initially

### Common Issues:
- **Domain verification**: Ensure your domain is verified in both Cloudflare and Supabase
- **DNS propagation**: Allow 24-48 hours for DNS changes to propagate
- **Rate limiting**: Cloudflare has generous limits but monitor usage
- **Spam filters**: Check spam/junk folders, especially during initial setup
- **Authentication**: Ensure SMTP credentials are correct

### Cloudflare Email Routing Configuration:

1. **Enable Email Routing**:
   - In Cloudflare Dashboard, go to Email → Email Routing
   - Click "Get started" and follow the setup wizard
   - Verify your domain ownership

2. **Create Email Addresses**:
   - Create `support@qially.me` for general support
   - Create `noreply@qially.me` for automated emails
   - Create `admin@qially.me` for administrative emails

3. **Configure Catch-all (Optional)**:
   - Set up a catch-all address to handle any unconfigured emails
   - This helps prevent email bounces

4. **Set up Email Rules**:
   - Forward support emails to your main email
   - Set up auto-replies if needed
   - Configure spam filtering

### Quick Test:
You can test the email functionality by:
1. Going to **Authentication** → **Users** in Supabase dashboard
2. Manually creating a user
3. Checking if the confirmation email is sent
4. Verify the email comes from your Cloudflare email address


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\SUPABASE_EMAIL_SETUP.md
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\SUPABASE_MIGRATION.md
TYPE: .md
================================================================================

# Supabase Migration Guide

This document outlines the migration from Cloudflare Access to Supabase authentication for the QiAlly Portal.

## Changes Made

### 1. Dependencies Updated
- **Added**: `@supabase/supabase-js` - Supabase JavaScript client
- **Removed**: 
  - `@cloudflare/pages-plugin-cloudflare-access`
  - `jose` (JWT library)
  - `@cloudflare/workers-types`

### 2. New Files Created
- `src/lib/supabase.js` - Supabase client configuration
- `src/pages/Login.jsx` - New login page with email/password authentication

### 3. Files Updated

#### Authentication & Context
- `src/context/UserContext.jsx` - Updated to use Supabase auth with session management
- `src/components/ProtectedRoute.jsx` - Updated to work with Supabase authentication
- `src/pages/Logout.jsx` - Updated to use Supabase signOut
- `src/utils/auth.js` - Updated utility functions for Supabase

#### Components & Pages
- `src/components/Header.jsx` - Updated to use Supabase auth and remove hardcoded portal links
- `src/pages/Client.jsx` - Updated to use Supabase user context
- `src/pages/ClientDash.jsx` - Updated to use Supabase user context
- `src/pages/Home.jsx` - Updated to use React Router links instead of hardcoded portal URLs
- `src/components/SiteHeader.jsx` - Updated to use React Router links

#### API & Utilities
- `src/lib/api.js` - Updated to work with Supabase and added helper functions
- `src/App.jsx` - Simplified routing, added Login route, removed host-aware logic

#### Configuration
- `package.json` - Updated dependencies
- `README.md` - Updated documentation to reflect Supabase usage

### 4. Files Removed
- `functions/api/me.js` - Cloudflare Function for user identity
- `functions/_middleware.js` - Cloudflare middleware
- `functions/[[path]].ts` - Cloudflare SPA routing

## Setup Instructions

### 1. Create Supabase Project
1. Go to [supabase.com](https://supabase.com) and create a new project
2. Note your project URL and anon key from the project settings

### 2. Environment Variables
Create a `.env` file in the project root:
```env
VITE_SUPABASE_URL=your_supabase_project_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
```

### 3. User Management
The role system is currently hardcoded in `src/context/UserContext.jsx`:
```javascript
const applyRole = (userEmail) => {
  const admins = ["admin@qially.me", "crice4485@gmail.com"];
  const clients = ["info@qially.me", "client1@email.com"];
  if (admins.includes(userEmail)) return "admin";
  if (clients.includes(userEmail)) return "client";
  return "guest";
};
```

### 4. Authentication Features
- **Email/Password Login**: Users can sign in with email and password
- **User Registration**: New users can create accounts
- **Password Reset**: Users can reset their passwords via email
- **Session Management**: Automatic session persistence and refresh
- **Role-Based Access**: Admin and client roles with different permissions

### 5. Deployment
The application is still optimized for Cloudflare Pages deployment:
1. Connect your GitHub repository to Cloudflare Pages
2. Set build command: `npm run build`
3. Set output directory: `dist`
4. Add environment variables in Cloudflare Pages settings

## Migration Benefits

### Advantages of Supabase
- **Simplified Setup**: No complex Cloudflare Access configuration required
- **Built-in Features**: Email/password auth, user management, password reset
- **Database Integration**: Easy to add database features in the future
- **Better Developer Experience**: More intuitive API and documentation
- **Cost Effective**: Free tier available for small projects

### Features Maintained
- Role-based access control
- Protected routes
- Session management
- User context throughout the application
- Responsive design and UI components

## Next Steps

1. **Set up Supabase project** and configure environment variables
2. **Test authentication flow** locally
3. **Deploy to Cloudflare Pages** with environment variables
4. **Consider adding database features** using Supabase's database capabilities
5. **Implement user management** in Supabase dashboard for easier role management

## Troubleshooting

### Common Issues
1. **Environment variables not loaded**: Ensure `.env` file is in project root
2. **Authentication not working**: Check Supabase project URL and anon key
3. **Build errors**: Run `npm install` to ensure all dependencies are installed
4. **CORS issues**: Configure Supabase project settings for your domain

### Support
- [Supabase Documentation](https://supabase.com/docs)
- [Supabase Auth Guide](https://supabase.com/docs/guides/auth)
- [React Integration](https://supabase.com/docs/guides/auth/auth-helpers/react)


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\SUPABASE_MIGRATION.md
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\SUPABASE_SETUP.md
TYPE: .md
================================================================================

# Supabase Database Setup

## User Profiles Table

Run this SQL in your Supabase SQL Editor to create the user_profiles table:

```sql
-- Create user_profiles table
CREATE TABLE IF NOT EXISTS user_profiles (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT UNIQUE NOT NULL,
  first_name TEXT,
  last_name TEXT,
  company TEXT,
  phone TEXT,
  timezone TEXT DEFAULT 'America/New_York',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security (RLS)
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;

-- Create policy to allow users to read their own profile
CREATE POLICY "Users can view own profile" ON user_profiles
  FOR SELECT USING (auth.uid() = user_id);

-- Create policy to allow users to insert their own profile
CREATE POLICY "Users can insert own profile" ON user_profiles
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create policy to allow users to update their own profile
CREATE POLICY "Users can update own profile" ON user_profiles
  FOR UPDATE USING (auth.uid() = user_id);

-- Create policy to allow users to delete their own profile
CREATE POLICY "Users can delete own profile" ON user_profiles
  FOR DELETE USING (auth.uid() = user_id);

-- Create index for faster queries
CREATE INDEX IF NOT EXISTS idx_user_profiles_email ON user_profiles(email);
CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON user_profiles(user_id);
```

## How to Run This:

1. Go to your Supabase project dashboard
2. Navigate to **SQL Editor**
3. Paste the SQL above
4. Click **Run** to execute

## What This Creates:

- **user_profiles table** with all profile fields
- **Row Level Security (RLS)** to ensure users can only access their own data
- **Policies** for SELECT, INSERT, UPDATE, DELETE operations
- **Indexes** for better query performance

## Testing:

After creating the table, you can test the profile functionality:

1. Go to Settings page in your app
2. Update profile information
3. Click "Save Changes"
4. Refresh the page - data should persist
5. Log out and log back in - data should still be there


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\SUPABASE_SETUP.md
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\tailwind.config.js
TYPE: .js
================================================================================

/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class", '[data-theme="dark"]'],
  content: ["./index.html", "./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    container: { center: true, padding: "1rem" },
    extend: {
      fontFamily: {
        display: ["Inter", "ui-sans-serif", "system-ui", "sans-serif"],
        sans: ["Inter", "ui-sans-serif", "system-ui", "sans-serif"],
      },
      colors: {
        // semantic tokens (mapped to CSS vars below)
        bg: "rgb(var(--bg) / <alpha-value>)",
        panel: "rgb(var(--panel) / <alpha-value>)",
        text: "rgb(var(--text) / <alpha-value>)",
        subtext: "rgb(var(--subtext) / <alpha-value>)",
        ring: "rgb(var(--ring) / <alpha-value>)",
        primary: {
          DEFAULT: "rgb(var(--primary) / <alpha-value>)",
          50:  "#eaf7ff",
          100: "#d6efff",
          200: "#aee0ff",
          300: "#76caff",
          400: "#41b2ff",
          500: "#1898ff",    // link/accent
          600: "#0f7ae6",
          700: "#0e62bf",
          800: "#0f4f98",
          900: "#123f78",
        },
        accent: {
          DEFAULT: "rgb(var(--accent) / <alpha-value>)", // teal glow
        },
      },
      boxShadow: {
        soft: "0 10px 30px rgba(0,0,0,.15)",
        glass: "0 1px 0 rgba(255,255,255,.06) inset, 0 8px 30px rgba(0,0,0,.35)",
      },
      borderRadius: {
        xl2: "1rem",
      },
      backgroundImage: {
        "glow-radial":
          "radial-gradient(60% 60% at 50% 0%, rgba(56,189,248,.25), transparent 60%)",
        "hero-gradient":
          "linear-gradient(180deg, rgba(8,19,39,1) 0%, rgba(9,12,22,1) 60%, rgba(7,10,18,1) 100%)",
        "text-gradient":
          "linear-gradient(90deg, #60a5fa 0%, #22d3ee 50%, #a78bfa 100%)",
      },
      backdropBlur: { xs: "2px" },
    },
  },
  plugins: [
    require("@tailwindcss/typography"),
    require("@tailwindcss/forms"),
    require("@tailwindcss/aspect-ratio"),
  ],
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\tailwind.config.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\vite.config.js
TYPE: .js
================================================================================

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  base: '/',
  plugins: [react()],
})


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\vite.config.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\kb-content\zy\getting-started.md
TYPE: .md
================================================================================

---
title: Getting Started
tags: [guide, onboarding, setup]
description: Learn how to get started with QiAlly platform
date: 2024-01-15
---

# Getting Started with QiAlly

Welcome to QiAlly! This guide will help you get started with our platform and understand the key features available to you.

## What is QiAlly?

QiAlly is a comprehensive business intelligence and process optimization platform designed to help organizations:

- **Analyze** their business processes
- **Optimize** workflows and efficiency
- **Monitor** key performance indicators
- **Collaborate** with team members
- **Access** knowledge and resources

## Key Features

### 1. Process Mapping
Create visual representations of your business processes using our intuitive mind mapping tools.

### 2. Knowledge Base
Access comprehensive documentation, guides, and best practices specific to your organization.

### 3. Project Management
Track projects, assign tasks, and monitor progress in real-time.

### 4. Communication Hub
Centralized messaging and collaboration tools for your team.

### 5. Analytics Dashboard
Monitor KPIs and performance metrics with customizable dashboards.

## Getting Started Steps

### Step 1: Complete Your Profile
1. Navigate to **Settings** in the main menu
2. Update your profile information
3. Set your preferences and notification settings

### Step 2: Explore Your Dashboard
1. Review the main dashboard overview
2. Familiarize yourself with the navigation menu
3. Check out the quick access widgets

### Step 3: Access Knowledge Base
1. Click on **Knowledge Base** in the main menu
2. Browse available documentation
3. Use the search function to find specific topics

### Step 4: Create Your First Process Map
1. Navigate to **Mind Map** in the main menu
2. Start with a simple process
3. Add nodes and connections
4. Save your work

## Best Practices

### Security
- Always log out when using shared computers
- Use strong, unique passwords
- Enable two-factor authentication if available

### Organization
- Use consistent naming conventions
- Tag your content appropriately
- Keep documentation up to date

### Collaboration
- Share relevant information with team members
- Use the messaging system for quick questions
- Contribute to the knowledge base

## Support

If you need help or have questions:

1. **Check the Knowledge Base** - Most questions are answered here
2. **Contact Support** - Use the support page for technical issues
3. **Ask Your Team** - Use the messaging system for quick questions

## Next Steps

Once you're comfortable with the basics:

1. **Explore Advanced Features** - Dive deeper into analytics and reporting
2. **Customize Your Workspace** - Set up dashboards and preferences
3. **Invite Team Members** - Collaborate with your colleagues
4. **Create Custom Processes** - Map your specific workflows

---

*Need help? Contact support at support@qially.me*


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\kb-content\zy\getting-started.md
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\kb-content\zy\process-optimization.md
TYPE: .md
================================================================================

---
title: Process Optimization Guide
tags: [process, optimization, workflow, efficiency]
description: Learn how to optimize your business processes for maximum efficiency
date: 2024-01-16
---

# Process Optimization Guide

This comprehensive guide will help you understand and implement process optimization strategies to improve your organization's efficiency and productivity.

## What is Process Optimization?

Process optimization is the systematic approach to improving business processes by:

- **Identifying** inefficiencies and bottlenecks
- **Analyzing** current workflows
- **Implementing** improvements
- **Monitoring** results
- **Iterating** for continuous improvement

## The Optimization Framework

### 1. Assessment Phase

#### Map Current Processes
- Document existing workflows
- Identify all stakeholders
- Map decision points and handoffs
- Measure current performance metrics

#### Identify Pain Points
- Look for bottlenecks and delays
- Identify redundant steps
- Find communication gaps
- Spot quality issues

### 2. Analysis Phase

#### Root Cause Analysis
Use the 5 Whys technique:
1. Why is this process slow?
2. Why does that happen?
3. Why does that occur?
4. Why is that the case?
5. Why is that happening?

#### Data Collection
- Gather performance metrics
- Survey stakeholders
- Analyze time logs
- Review error rates

### 3. Design Phase

#### Brainstorm Solutions
- Eliminate unnecessary steps
- Automate repetitive tasks
- Standardize procedures
- Improve communication channels

#### Create New Process Maps
- Design optimized workflows
- Define clear responsibilities
- Establish checkpoints
- Plan for contingencies

### 4. Implementation Phase

#### Pilot Testing
- Start with a small group
- Test the new process
- Gather feedback
- Make adjustments

#### Full Rollout
- Train all stakeholders
- Implement new procedures
- Monitor closely
- Provide support

### 5. Monitoring Phase

#### Track Performance
- Measure key metrics
- Compare before/after
- Identify new issues
- Celebrate improvements

#### Continuous Improvement
- Regular process reviews
- Stakeholder feedback
- Technology updates
- Best practice adoption

## Common Optimization Techniques

### 1. Lean Methodology
**Principle**: Eliminate waste and maximize value

**Techniques**:
- Value Stream Mapping
- 5S Methodology (Sort, Set, Shine, Standardize, Sustain)
- Just-in-Time (JIT) processes
- Kaizen (continuous improvement)

### 2. Six Sigma
**Principle**: Reduce defects and variation

**Techniques**:
- DMAIC (Define, Measure, Analyze, Improve, Control)
- Statistical process control
- Root cause analysis
- Process capability analysis

### 3. Business Process Reengineering
**Principle**: Radical redesign of processes

**Techniques**:
- Process mapping
- Gap analysis
- Benchmarking
- Technology integration

## Technology Tools for Optimization

### Process Mapping Tools
- **QiAlly Mind Map**: Visual process mapping
- **Lucidchart**: Professional diagrams
- **Draw.io**: Free diagramming tool

### Automation Tools
- **Zapier**: Workflow automation
- **Microsoft Power Automate**: Business process automation
- **IFTTT**: Simple automation rules

### Analytics Tools
- **Google Analytics**: Web process tracking
- **Mixpanel**: User behavior analysis
- **Hotjar**: User experience insights

## Best Practices

### 1. Start Small
- Focus on one process at a time
- Choose high-impact, low-risk improvements
- Build momentum with quick wins

### 2. Involve Stakeholders
- Get input from all affected parties
- Communicate changes clearly
- Provide training and support

### 3. Measure Everything
- Define clear success metrics
- Track progress regularly
- Use data to make decisions

### 4. Be Patient
- Process improvement takes time
- Expect resistance to change
- Celebrate incremental progress

### 5. Stay Flexible
- Be willing to adjust plans
- Learn from failures
- Adapt to new circumstances

## Common Pitfalls to Avoid

### 1. Over-Engineering
- Don't make processes more complex than necessary
- Focus on simplicity and clarity
- Avoid unnecessary bureaucracy

### 2. Ignoring People
- Technology alone won't solve problems
- Consider human factors and emotions
- Provide adequate training and support

### 3. Skipping Measurement
- Without metrics, you can't prove improvement
- Establish baseline measurements
- Track progress consistently

### 4. Rushing Implementation
- Take time to plan and test
- Don't skip the pilot phase
- Allow time for adoption

## Success Metrics

### Efficiency Metrics
- **Cycle Time**: Time to complete a process
- **Throughput**: Number of items processed per time period
- **Utilization**: Percentage of available capacity used

### Quality Metrics
- **Error Rate**: Percentage of defects or errors
- **Rework Rate**: Percentage of work that needs to be redone
- **Customer Satisfaction**: Feedback from process users

### Cost Metrics
- **Cost per Transaction**: Total cost divided by number of transactions
- **Labor Cost**: Time and effort required
- **Resource Utilization**: Efficient use of materials and equipment

## Case Study: Order Processing Optimization

### Before Optimization
- **Cycle Time**: 48 hours
- **Error Rate**: 15%
- **Customer Complaints**: 25 per month
- **Staff Time**: 8 hours per order

### Optimization Actions
1. **Automated** order entry system
2. **Standardized** approval process
3. **Implemented** quality checkpoints
4. **Trained** staff on new procedures

### After Optimization
- **Cycle Time**: 12 hours (75% improvement)
- **Error Rate**: 3% (80% improvement)
- **Customer Complaints**: 3 per month (88% improvement)
- **Staff Time**: 2 hours per order (75% improvement)

## Next Steps

1. **Choose a Process**: Identify one process to optimize
2. **Assemble Team**: Get stakeholders involved
3. **Map Current State**: Document existing workflow
4. **Identify Opportunities**: Look for improvement areas
5. **Design Improvements**: Create new process maps
6. **Implement Changes**: Execute the optimization plan
7. **Monitor Results**: Track performance metrics
8. **Iterate**: Continue improving

---

*For more information about process optimization tools and techniques, explore our other knowledge base articles or contact our optimization specialists.*


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\kb-content\zy\process-optimization.md
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\public\404.html
TYPE: .html
================================================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    
    <!-- Basic Meta -->
    <title>QiAlly — Empowering Systems That Breathe</title>
    <meta name="description" content="QiAlly™ helps you transform chaos into clarity with modular systems, client portals, and operational revival." />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta id="robots-meta" name="robots" content="noindex, nofollow" />
    <meta name="author" content="QiAlly" />

    <!-- Open Graph / Social -->
    <meta property="og:title" content="QiAlly™ | Systems That Breathe" />
    <meta property="og:description" content="The QiSuite™ Portal is live. Full website coming soon." />
    <meta id="og-image" property="og:image" content="https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png" />
    <meta id="og-url" property="og:url" content="https://portal.qially.com/" />
    <meta name="twitter:card" content="summary_large_image" />

    <!-- Favicon -->
    <link rel="icon" href="https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png" type="image/png" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
    
    <!-- Host-aware meta for SEO -->
    <script>
      const host = window.location.hostname;
      const robots = document.getElementById("robots-meta");
      const ogUrl = document.getElementById("og-url");
      const ogImg = document.getElementById("og-image");

      if (host === "qially.com" || host === "www.qially.com") {
        robots?.setAttribute("content", "index, follow");
        ogUrl?.setAttribute("content", "https://qially.com/");
        ogImg?.setAttribute("content", "https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png");
      } else {
        robots?.setAttribute("content", "noindex, nofollow");
        ogUrl?.setAttribute("content", "https://portal.qially.com/");
        ogImg?.setAttribute("content", "https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png");
      }
    </script>
  </body>
</html>


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\public\404.html
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\scripts\build-kb.js
TYPE: .js
================================================================================

import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import { glob } from 'fast-glob';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configuration
const KB_SOURCE_DIR = path.join(__dirname, '../kb-content');
const KB_BUILD_DIR = path.join(__dirname, '../public/kb');
const CLIENT_CONFIG_FILE = path.join(__dirname, '../kb-config.json');

// Ensure build directory exists
if (!fs.existsSync(KB_BUILD_DIR)) {
  fs.mkdirSync(KB_BUILD_DIR, { recursive: true });
}

// Load client configuration
function loadClientConfig() {
  if (!fs.existsSync(CLIENT_CONFIG_FILE)) {
    console.warn('No kb-config.json found, using default configuration');
    return {
      clients: {
        'zy': {
          name: 'Default Client',
          members: ['info@qially.me', 'client1@email.com'],
          public: false
        }
      }
    };
  }
  
  try {
    return JSON.parse(fs.readFileSync(CLIENT_CONFIG_FILE, 'utf8'));
  } catch (error) {
    console.error('Error loading client configuration:', error);
    return { clients: {} };
  }
}

// Process markdown files and extract metadata
function processMarkdownFile(filePath, clientSlug) {
  const content = fs.readFileSync(filePath, 'utf8');
  const { data: frontmatter, content: markdown } = matter(content);
  
  // Extract path relative to client directory
  const relativePath = path.relative(path.join(KB_SOURCE_DIR, clientSlug), filePath);
  const slug = relativePath.replace(/\.md$/, '').replace(/\\/g, '/');
  
  return {
    path: slug,
    title: frontmatter.title || path.basename(filePath, '.md'),
    tags: frontmatter.tags || [],
    description: frontmatter.description || '',
    date: frontmatter.date || new Date().toISOString(),
    content: markdown,
    clientSlug
  };
}

// Generate client-specific knowledge base
function generateClientKB(clientSlug, clientConfig) {
  const clientDir = path.join(KB_SOURCE_DIR, clientSlug);
  
  if (!fs.existsSync(clientDir)) {
    console.warn(`Client directory not found: ${clientDir}`);
    return [];
  }
  
  // Find all markdown files
  const markdownFiles = glob.sync('**/*.md', {
    cwd: clientDir,
    absolute: true
  });
  
  const documents = markdownFiles.map(file => processMarkdownFile(file, clientSlug));
  
  // Create client build directory
  const clientBuildDir = path.join(KB_BUILD_DIR, clientSlug);
  if (!fs.existsSync(clientBuildDir)) {
    fs.mkdirSync(clientBuildDir, { recursive: true });
  }
  
  // Generate static files for each document
  documents.forEach(doc => {
    const docDir = path.dirname(path.join(clientBuildDir, doc.path));
    if (!fs.existsSync(docDir)) {
      fs.mkdirSync(docDir, { recursive: true });
    }
    
    // Create HTML file
    const htmlContent = generateHTML(doc);
    const htmlPath = path.join(clientBuildDir, doc.path + '.html');
    fs.writeFileSync(htmlPath, htmlContent);
    
    // Create JSON metadata file
    const jsonPath = path.join(clientBuildDir, doc.path + '.json');
    fs.writeFileSync(jsonPath, JSON.stringify(doc, null, 2));
  });
  
  // Generate index file for client
  const indexContent = generateClientIndex(documents, clientSlug, clientConfig);
  const indexPath = path.join(clientBuildDir, 'index.html');
  fs.writeFileSync(indexPath, indexContent);
  
  // Generate search index
  const searchIndex = generateSearchIndex(documents);
  const searchIndexPath = path.join(clientBuildDir, 'search-index.json');
  fs.writeFileSync(searchIndexPath, JSON.stringify(searchIndex, null, 2));
  
  return documents;
}

// Generate HTML for a document
function generateHTML(doc) {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${doc.title} - Knowledge Base</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/marked/marked.min.js"></script>
    <script src="https://unpkg.com/dompurify@3.0.5/dist/purify.min.js"></script>
    <style>
        .prose { max-width: none; }
        .prose h1 { font-size: 2.25rem; margin-top: 0; }
        .prose h2 { font-size: 1.875rem; }
        .prose h3 { font-size: 1.5rem; }
        .prose code { background-color: rgba(255,255,255,0.1); padding: 0.125rem 0.25rem; border-radius: 0.25rem; }
        .prose pre { background-color: rgba(0,0,0,0.3); padding: 1rem; border-radius: 0.5rem; overflow-x: auto; }
        .prose pre code { background-color: transparent; padding: 0; }
    </style>
</head>
<body class="bg-gray-900 text-white min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <nav class="mb-8">
            <a href="index.html" class="text-blue-400 hover:text-blue-300">← Back to Index</a>
        </nav>
        
        <article class="prose prose-invert prose-lg">
            <h1>${doc.title}</h1>
            <div class="flex gap-2 mb-6">
                ${doc.tags.map(tag => `<span class="bg-blue-600 px-2 py-1 rounded text-sm">#${tag}</span>`).join('')}
            </div>
            <div id="content"></div>
        </article>
    </div>
    
    <script>
        const content = \`${doc.content.replace(/`/g, '\\`')}\`;
        const html = DOMPurify.sanitize(marked.parse(content));
        document.getElementById('content').innerHTML = html;
    </script>
</body>
</html>`;
}

// Generate client index page
function generateClientIndex(documents, clientSlug, clientConfig) {
  const client = clientConfig.clients[clientSlug];
  
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Knowledge Base - ${client?.name || clientSlug}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/fuse.js@7.1.0/dist/fuse.min.js"></script>
</head>
<body class="bg-gray-900 text-white min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <header class="mb-8">
            <h1 class="text-3xl font-bold mb-2">Knowledge Base</h1>
            <p class="text-gray-400">${client?.name || clientSlug}</p>
        </header>
        
        <div class="mb-6">
            <input 
                type="text" 
                id="search" 
                placeholder="Search documents..." 
                class="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-blue-500"
            >
        </div>
        
        <div id="documents" class="grid gap-4">
            ${documents.map(doc => `
                <div class="document-item bg-gray-800 p-4 rounded-lg hover:bg-gray-700 transition-colors">
                    <a href="${doc.path}.html" class="block">
                        <h3 class="text-lg font-semibold mb-2">${doc.title}</h3>
                        <p class="text-gray-400 text-sm mb-2">${doc.description}</p>
                        <div class="flex gap-2">
                            ${doc.tags.map(tag => `<span class="bg-blue-600 px-2 py-1 rounded text-xs">#${tag}</span>`).join('')}
                        </div>
                    </a>
                </div>
            `).join('')}
        </div>
    </div>
    
    <script>
        const documents = ${JSON.stringify(documents)};
        const fuse = new Fuse(documents, {
            keys: ['title', 'description', 'tags'],
            threshold: 0.3
        });
        
        const searchInput = document.getElementById('search');
        const documentsContainer = document.getElementById('documents');
        
        searchInput.addEventListener('input', (e) => {
            const query = e.target.value;
            const results = query ? fuse.search(query).map(r => r.item) : documents;
            
            documentsContainer.innerHTML = results.map(doc => \`
                <div class="document-item bg-gray-800 p-4 rounded-lg hover:bg-gray-700 transition-colors">
                    <a href="\${doc.path}.html" class="block">
                        <h3 class="text-lg font-semibold mb-2">\${doc.title}</h3>
                        <p class="text-gray-400 text-sm mb-2">\${doc.description}</p>
                        <div class="flex gap-2">
                            \${doc.tags.map(tag => \`<span class="bg-blue-600 px-2 py-1 rounded text-xs">#\${tag}</span>\`).join('')}
                        </div>
                    </a>
                </div>
            \`).join('');
        });
    </script>
</body>
</html>`;
}

// Generate search index
function generateSearchIndex(documents) {
  return documents.map(doc => ({
    path: doc.path,
    title: doc.title,
    description: doc.description,
    tags: doc.tags,
    content: doc.content.substring(0, 500) // First 500 chars for search
  }));
}

// Generate access control configuration
function generateAccessControl(clientConfig) {
  const accessControl = {};
  
  Object.entries(clientConfig.clients).forEach(([clientSlug, config]) => {
    accessControl[clientSlug] = {
      members: config.members || [],
      public: config.public || false,
      name: config.name || clientSlug
    };
  });
  
  const accessControlPath = path.join(KB_BUILD_DIR, 'access-control.json');
  fs.writeFileSync(accessControlPath, JSON.stringify(accessControl, null, 2));
  
  return accessControl;
}

// Main build function
function buildKnowledgeBase() {
  console.log('Building static knowledge base...');
  
  const clientConfig = loadClientConfig();
  const accessControl = generateAccessControl(clientConfig);
  
  // Build each client's knowledge base
  Object.keys(clientConfig.clients).forEach(clientSlug => {
    console.log(`Building KB for client: ${clientSlug}`);
    const documents = generateClientKB(clientSlug, clientConfig);
    console.log(`Generated ${documents.length} documents for ${clientSlug}`);
  });
  
  // Generate main index
  const mainIndex = generateMainIndex(clientConfig);
  const mainIndexPath = path.join(KB_BUILD_DIR, 'index.html');
  fs.writeFileSync(mainIndexPath, mainIndex);
  
  console.log('Knowledge base build complete!');
  console.log(`Output directory: ${KB_BUILD_DIR}`);
}

// Generate main index page
function generateMainIndex(clientConfig) {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Knowledge Base Portal</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <header class="text-center mb-12">
            <h1 class="text-4xl font-bold mb-4">Knowledge Base Portal</h1>
            <p class="text-gray-400">Select your organization to access the knowledge base</p>
        </header>
        
        <div class="grid gap-6 max-w-2xl mx-auto">
            ${Object.entries(clientConfig.clients).map(([slug, config]) => `
                <div class="bg-gray-800 p-6 rounded-lg hover:bg-gray-700 transition-colors">
                    <a href="${slug}/index.html" class="block">
                        <h2 class="text-xl font-semibold mb-2">${config.name || slug}</h2>
                        <p class="text-gray-400">Access the knowledge base for ${config.name || slug}</p>
                    </a>
                </div>
            `).join('')}
        </div>
        
        <div class="text-center mt-12 text-gray-500">
            <p>Access is restricted to authorized members only.</p>
        </div>
    </div>
</body>
</html>`;
}

// Run the build
buildKnowledgeBase();


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\scripts\build-kb.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\scripts\code_extractor.py
TYPE: .py
================================================================================

import os
from datetime import datetime

def should_ignore_directory(dir_name):
    """Check if directory should be ignored."""
    ignore_dirs = ['dist', 'node_modules']
    return dir_name.lower() in [d.lower() for d in ignore_dirs]

def get_file_extension(file_name):
    """Get file extension for determining if it's a code file."""
    return os.path.splitext(file_name)[1].lower()

def is_code_file(file_name):
    """Check if file is likely a code file based on extension."""
    # Files to explicitly ignore
    ignore_files = ['package-lock.json']
    if file_name in ignore_files:
        return False
    
    code_extensions = {
        '.py', '.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.scss', '.sass',
        '.json', '.xml', '.yaml', '.yml', '.md', '.txt', '.sh', '.bat', '.ps1',
        '.vue', '.php', '.java', '.cpp', '.c', '.h', '.hpp', '.cs', '.rb',
        '.go', '.rs', '.swift', '.kt', '.scala', '.r', '.sql', '.pl', '.lua',
        '.config.js'  # Include config.js files
    }
    
    # Check for exact extension match
    if get_file_extension(file_name) in code_extensions:
        return True
    
    # Special check for .config.js files
    if file_name.endswith('.config.js'):
        return True
    
    return False

def print_directory_tree(root_dir, output_file, current_depth=0, prefix=''):
    """Recursively prints the directory tree structure and writes to output file."""
    
    try:
        # Get the list of items in the directory
        items = os.listdir(root_dir)
    except PermissionError:
        message = prefix + "└── [Permission Denied]"
        print(message)
        output_file.write(message + "\n")
        return
    except FileNotFoundError:
        message = prefix + "└── [Directory Not Found]"
        print(message)
        output_file.write(message + "\n")
        return

    # Sort items: directories first, then files
    items = sorted(items, key=lambda s: s.lower())
    directories = [item for item in items if os.path.isdir(os.path.join(root_dir, item))]
    files = [item for item in items if not os.path.isdir(os.path.join(root_dir, item))]

    # Filter out ignored directories and hidden files/directories
    directories = [item for item in directories if not should_ignore_directory(item) and not item.startswith('.')]
    files = [item for item in files if not item.startswith('.')]

    # Combine directories and files
    items = directories + files

    for index, item in enumerate(items):
        path = os.path.join(root_dir, item)
        
        # Determine tree connector style
        if index == len(items) - 1:
            connector = '└── '
            extension = '    '
        else:
            connector = '├── '
            extension = '│   '

        # Print and write to file
        message = prefix + connector + item
        print(message)
        output_file.write(message + "\n")

        # Recurse into directories (excluding ignored ones)
        if os.path.isdir(path):
            print_directory_tree(path, output_file, current_depth + 1, prefix + extension)

def extract_file_content(file_path, output_file):
    """Extract and write file content with header."""
    try:
        # Create header
        header = f"\n{'='*80}\n"
        header += f"FILE: {file_path}\n"
        header += f"TYPE: {get_file_extension(file_path)}\n"
        header += f"{'='*80}\n\n"
        
        print(header)
        output_file.write(header)
        
        # Read and write file content
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            print(content)
            output_file.write(content)
            
        # Add footer
        footer = f"\n\n{'='*80}\nEND OF FILE: {file_path}\n{'='*80}\n\n"
        print(footer)
        output_file.write(footer)
        
    except Exception as e:
        error_msg = f"\nERROR READING FILE {file_path}: {str(e)}\n"
        print(error_msg)
        output_file.write(error_msg)

def scan_and_extract_files(root_dir, output_file):
    """Scan directory tree and extract content from all code files."""
    print(f"\n{'='*80}")
    print("STARTING FILE CONTENT EXTRACTION")
    print(f"{'='*80}\n")
    output_file.write(f"\n{'='*80}\n")
    output_file.write("STARTING FILE CONTENT EXTRACTION\n")
    output_file.write(f"{'='*80}\n\n")
    
    file_count = 0
    
    for root, dirs, files in os.walk(root_dir):
        # Filter out ignored directories from traversal
        dirs[:] = [d for d in dirs if not should_ignore_directory(d) and not d.startswith('.')]
        
        # Filter out hidden files and sort for consistent order
        files = [f for f in files if not f.startswith('.')]
        files = sorted(files, key=lambda s: s.lower())
        
        for file_name in files:
            file_path = os.path.join(root, file_name)
            
            # Only process code files
            if is_code_file(file_name):
                extract_file_content(file_path, output_file)
                file_count += 1
    
    return file_count

def main():
    """Main function to run the code extraction."""
    # Get the project root (current working directory)
    root_dir = os.getcwd()
    
    # Create output file in root directory
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_filename = f"code_extraction_{timestamp}.txt"
    output_path = os.path.join(root_dir, output_filename)
    
    print(f"Starting code extraction from: {root_dir}")
    print(f"Output will be saved to: {output_path}")
    print(f"Ignoring directories: dist, node_modules")
    print(f"Ignoring files: package-lock.json")
    print(f"{'='*80}\n")
    
    with open(output_path, 'w', encoding='utf-8') as output_file:
        # Write header information
        header_info = f"CODE EXTRACTION REPORT\n"
        header_info += f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        header_info += f"Root Directory: {root_dir}\n"
        header_info += f"Ignored Directories: dist, node_modules\n"
        header_info += f"Ignored Files: package-lock.json\n"
        header_info += f"{'='*80}\n\n"
        
        print(header_info)
        output_file.write(header_info)
        
        # Print directory tree
        print("DIRECTORY TREE STRUCTURE:")
        print("-" * 40)
        output_file.write("DIRECTORY TREE STRUCTURE:\n")
        output_file.write("-" * 40 + "\n")
        
        print_directory_tree(root_dir, output_file)
        
        # Extract file contents
        file_count = scan_and_extract_files(root_dir, output_file)
        
        # Write footer
        footer = f"\n{'='*80}\n"
        footer += f"EXTRACTION COMPLETE\n"
        footer += f"Total files processed: {file_count}\n"
        footer += f"Output saved to: {output_path}\n"
        footer += f"{'='*80}\n"
        
        print(footer)
        output_file.write(footer)
    
    print(f"\nCode extraction completed successfully!")
    print(f"Output saved to: {output_path}")

if __name__ == "__main__":
    main()


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\scripts\code_extractor.py
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\scripts\directory_mapper.py
TYPE: .py
================================================================================

import os
import argparse
from datetime import datetime

def print_directory_tree(root_dir, show_files=True, max_depth=None, current_depth=0, prefix='', log_file=None, include_hidden=True, exclude_dirs=None):
    """
    Recursively prints the directory tree structure up to the specified depth and writes to a log file.
    """
    if exclude_dirs is None:
        exclude_dirs = [
            'venv', '__pycache__', 'data', 'logs',
            '.git', '.vscode', '.idea', '.pytest_cache',
            '.venv', '.DS_Store', '.env', '.env.local',
            '.env.development.local', '.env.test.local',
            '.env.production.local', 'Empty_Folders',
            '.docusaurus', '.docusaurus-plugin-content-docs-current',
            # Node / frontend bloat
            'node_modules', '.node_modules',
            # Tools/programs we don't want
            'mpc-hc', 'losslesscut', 'OCR', 'pdf-main', 'my-pdf-main',
            # Tests (ignore any folder containing these patterns)
            'test', 'tests', '__tests__',
            # Plugins and cache
            'plugins', '.local'
        ]

    if max_depth is not None and current_depth >= max_depth:
        return

    try:
        # Get the list of items in the directory
        items = os.listdir(root_dir)
    except PermissionError:
        message = prefix + "└── [Permission Denied]"
        print(message)
        if log_file:
            log_file.write(message + "\n")
        return
    except FileNotFoundError:
        message = prefix + "└── [Directory Not Found]"
        print(message)
        if log_file:
            log_file.write(message + "\n")
        return

    # Sort items: directories first, then files
    items = sorted(items, key=lambda s: s.lower())
    directories = [item for item in items if os.path.isdir(os.path.join(root_dir, item))]
    files = [item for item in items if not os.path.isdir(os.path.join(root_dir, item))]

    # Exclude directories that match or contain any exclude pattern
    directories = [
        item for item in directories
        if not any(ex.lower() in item.lower() for ex in exclude_dirs)
    ]

    # Show files or just folders
    items = directories if not show_files else directories + files

    for index, item in enumerate(items):
        if not include_hidden and item.startswith('.'):
            continue

        path = os.path.join(root_dir, item)
        # Determine tree connector style
        if index == len(items) - 1:
            connector = '└── '
            extension = '    '
        else:
            connector = '├── '
            extension = '│   '

        # Print and log
        message = prefix + connector + item
        print(message)
        if log_file:
            log_file.write(message + "\n")

        # Recurse into directories
        if os.path.isdir(path):
            print_directory_tree(path, show_files, max_depth, current_depth + 1,
                                 prefix + extension, log_file, include_hidden, exclude_dirs)

def create_log_file(filename_prefix, suffix=""):
    """Creates a timestamped log file in Downloads."""
    downloads_dir = os.path.join(os.path.expanduser("~"), "Downloads")

    sanitized_prefix = "".join(c for c in filename_prefix if c.isalnum() or c in (' ', '_', '-')).strip()
    if not sanitized_prefix:
        sanitized_prefix = "log"

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    base_log_file_name = f"{sanitized_prefix}_{timestamp}{suffix}"
    log_file_name = f"{base_log_file_name}.txt"
    log_file_path = os.path.join(downloads_dir, log_file_name)

    counter = 1
    while os.path.exists(log_file_path):
        log_file_name = f"{base_log_file_name}_{counter}.txt"
        log_file_path = os.path.join(downloads_dir, log_file_name)
        counter += 1

    return open(log_file_path, "w", encoding="utf-8")

def main():
    """Main orchestrator for generating directory tree."""
    try:
        # Set default path to project root (current working directory)
        root_dir = os.getcwd()
        
        # Default settings: show both files and folders, no depth limit
        show_files = True
        max_depth = None

        log_file_tree = create_log_file(os.path.basename(root_dir), "_tree")
        print(f"Log file created: {log_file_tree.name}")
        print(f"Resolved path: {root_dir}")
        log_file_tree.write(f"Resolved path: {root_dir}\n")

        print_directory_tree(root_dir, show_files, max_depth, log_file=log_file_tree)
        log_file_tree.close()
        print(f"Directory structure logged in: {log_file_tree.name}")

    except Exception as e:
        print(f"An unexpected error occurred in main: {e}")

if __name__ == "__main__":
    main()


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\scripts\directory_mapper.py
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\App.jsx
TYPE: .jsx
================================================================================

import { Routes, Route, Navigate } from 'react-router-dom';
import Home from './pages/Home.jsx';
import Login from './pages/Login.jsx';
import Logout from './pages/Logout.jsx';
import NotFound from './pages/NotFound.jsx';
import Client from './pages/Client.jsx';
import Projects from './pages/Projects.jsx';
import Messages from './pages/Messages.jsx';
import Settings from './pages/Settings.jsx';
import AdminPanel from './pages/AdminPanel.jsx';
import KB from './pages/KB.jsx';
import Calls from './pages/Calls.jsx';
import Billing from './pages/Billing.jsx';
import Support from './pages/Support.jsx';
import ProtectedRoute from './components/ProtectedRoute.jsx';
import Header from './components/Header.jsx';
import { useUser } from './context/UserContext';
import MindMap from './pages/MindMap.jsx';
import { forceClearAuth } from './utils/auth';

export default function App() {
  const { email, role } = useUser();

  return (
    <div className="min-h-screen flex flex-col">
      {/* Header */}
      <Header />

      {/* Routes */}
      <main className="flex-1 overflow-auto">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/login" element={<Login />} />
          <Route path="/logout" element={<Logout />} />
          {/* Debug route - remove in production */}
          {process.env.NODE_ENV === 'development' && (
            <Route path="/debug" element={
              <div className="min-h-screen bg-gray-900 text-white p-8">
                <h1 className="text-2xl mb-4">Auth Debug</h1>
                <div className="space-y-4">
                  <div>
                    <strong>Email:</strong> {email || 'Not logged in'}
                  </div>
                  <div>
                    <strong>Role:</strong> {role}
                  </div>
                  <div>
                    <strong>Local Storage:</strong>
                    <pre className="bg-gray-800 p-2 rounded text-xs overflow-auto">
                      {JSON.stringify(Object.keys(localStorage).filter(key => key.includes('supabase') || key.includes('auth')), null, 2)}
                    </pre>
                  </div>
                  <div>
                    <strong>Session Storage:</strong>
                    <pre className="bg-gray-800 p-2 rounded text-xs overflow-auto">
                      {JSON.stringify(Object.keys(sessionStorage).filter(key => key.includes('supabase') || key.includes('auth')), null, 2)}
                    </pre>
                  </div>
                  <button
                    onClick={() => {
                      forceClearAuth();
                      window.location.reload();
                    }}
                    className="bg-red-600 px-4 py-2 rounded"
                  >
                    Force Clear Auth & Reload
                  </button>
                </div>
              </div>
            } />
          )}
          <Route 
            path="/mindmap" 
            element={
              <ProtectedRoute>
                <MindMap />
              </ProtectedRoute>
            } 
          />
          {/* Protected routes */}
          <Route 
            path="/client" 
            element={
              <ProtectedRoute>
                <Client />
              </ProtectedRoute>
            } 
          />

          <Route 
            path="/projects" 
            element={
              <ProtectedRoute>
                <Projects />
              </ProtectedRoute>
            } 
          />

          <Route 
            path="/messages" 
            element={
              <ProtectedRoute>
                <Messages />
              </ProtectedRoute>
            } 
          />

          <Route 
            path="/settings" 
            element={
              <ProtectedRoute>
                <Settings />
              </ProtectedRoute>
            } 
          />

          <Route 
            path="/kb" 
            element={
              <ProtectedRoute>
                <KB />
              </ProtectedRoute>
            } 
          />

          <Route 
            path="/calls" 
            element={
              <ProtectedRoute>
                <Calls />
              </ProtectedRoute>
            } 
          />

          <Route 
            path="/billing" 
            element={
              <ProtectedRoute>
                <Billing />
              </ProtectedRoute>
            } 
          />

          <Route 
            path="/support" 
            element={
              <ProtectedRoute>
                <Support />
              </ProtectedRoute>
            } 
          />

          <Route
            path="/admin"
            element={
              <ProtectedRoute roleRequired="admin">
                <AdminPanel />
              </ProtectedRoute>
            }
          />

          {/* Fallback */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </main>

      <footer className="container py-10 text-subtext">
        © {new Date().getFullYear()} QiAlly. No tracking. No drama.
      </footer>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\App.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\index.css
TYPE: .css
================================================================================

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Glassmorphism Base Styles */
@layer base {
  body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  }
}

/* Glassmorphism Components */
@layer components {
  .glass-card {
    @apply bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl shadow-2xl;
    box-shadow: 
      0 8px 32px 0 rgba(31, 38, 135, 0.37),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  .glass-card-hover {
    @apply transition-all duration-300 hover:bg-white/15 hover:border-white/30;
    box-shadow: 
      0 8px 32px 0 rgba(31, 38, 135, 0.37),
      inset 0 1px 0 rgba(255, 255, 255, 0.2),
      0 0 20px rgba(255, 255, 255, 0.1);
  }

  .glass-button {
    @apply bg-white/20 backdrop-blur-md border border-white/30 rounded-xl px-6 py-3 text-white font-medium transition-all duration-300;
    box-shadow: 
      0 4px 16px 0 rgba(31, 38, 135, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  .glass-button:hover {
    @apply bg-white/30 border-white/40 transform scale-105;
    box-shadow: 
      0 8px 32px 0 rgba(31, 38, 135, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.3),
      0 0 20px rgba(255, 255, 255, 0.2);
  }

  .glass-button-primary {
    @apply bg-gradient-to-r from-blue-500/80 to-purple-600/80 backdrop-blur-md border border-blue-400/30 rounded-xl px-6 py-3 text-white font-medium transition-all duration-300;
    box-shadow: 
      0 4px 16px 0 rgba(59, 130, 246, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  .glass-button-primary:hover {
    @apply transform scale-105;
    box-shadow: 
      0 8px 32px 0 rgba(59, 130, 246, 0.6),
      inset 0 1px 0 rgba(255, 255, 255, 0.3),
      0 0 25px rgba(59, 130, 246, 0.4);
  }

  .glass-input {
    @apply bg-white/10 backdrop-blur-md border border-white/20 rounded-xl px-4 py-3 text-white placeholder-white/60 focus:outline-none focus:border-white/40 transition-all duration-300;
    box-shadow: 
      0 4px 16px 0 rgba(31, 38, 135, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  .glass-input:focus {
    @apply bg-white/15 border-white/40;
    box-shadow: 
      0 8px 32px 0 rgba(31, 38, 135, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2),
      0 0 15px rgba(255, 255, 255, 0.1);
  }

  .glass-nav {
    @apply bg-white/10 backdrop-blur-xl border-b border-white/20;
    box-shadow: 
      0 4px 16px 0 rgba(31, 38, 135, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  .glass-nav-link {
    @apply text-white/80 hover:text-white transition-all duration-300 relative;
  }

  .glass-nav-link::after {
    content: '';
    @apply absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-blue-400 to-purple-400 transition-all duration-300;
  }

  .glass-nav-link:hover::after {
    @apply w-full;
  }

  .glass-tab {
    @apply bg-white/10 backdrop-blur-md border border-white/20 rounded-xl px-4 py-2 text-white/80 font-medium transition-all duration-300;
    box-shadow: 
      0 2px 8px 0 rgba(31, 38, 135, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  .glass-tab.active {
    @apply bg-white/20 border-white/30 text-white;
    box-shadow: 
      0 4px 16px 0 rgba(31, 38, 135, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2),
      0 0 15px rgba(255, 255, 255, 0.1);
  }

  .glass-tab:hover {
    @apply bg-white/15 border-white/25 text-white;
  }

  .glass-badge {
    @apply bg-white/20 backdrop-blur-md border border-white/30 rounded-full px-3 py-1 text-xs font-medium text-white;
    box-shadow: 
      0 2px 8px 0 rgba(31, 38, 135, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  .glass-notification {
    @apply bg-white/15 backdrop-blur-md border border-white/25 rounded-xl p-4 transition-all duration-300;
    box-shadow: 
      0 4px 16px 0 rgba(31, 38, 135, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  .glass-notification:hover {
    @apply bg-white/20 border-white/30;
    box-shadow: 
      0 8px 32px 0 rgba(31, 38, 135, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2),
      0 0 15px rgba(255, 255, 255, 0.1);
  }

  .glass-modal {
    @apply bg-white/10 backdrop-blur-2xl border border-white/20 rounded-2xl shadow-2xl;
    box-shadow: 
      0 25px 50px -12px rgba(0, 0, 0, 0.5),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  .glass-overlay {
    @apply bg-black/20 backdrop-blur-sm;
  }

  /* Glowing effects */
  .glow-blue {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.4);
  }

  .glow-green {
    box-shadow: 0 0 20px rgba(34, 197, 94, 0.4);
  }

  .glow-purple {
    box-shadow: 0 0 20px rgba(147, 51, 234, 0.4);
  }

  .glow-red {
    box-shadow: 0 0 20px rgba(239, 68, 68, 0.4);
  }

  .glow-yellow {
    box-shadow: 0 0 20px rgba(234, 179, 8, 0.4);
  }

  /* Animated background */
  .animated-bg {
    background: linear-gradient(-45deg, #667eea, #764ba2, #f093fb, #f5576c);
    background-size: 400% 400%;
    animation: gradientShift 15s ease infinite;
  }

  @keyframes gradientShift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Floating animation */
  .float {
    animation: float 6s ease-in-out infinite;
  }

  @keyframes float {
    0% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
    100% {
      transform: translateY(0px);
    }
  }

  /* Pulse animation */
  .pulse-glow {
    animation: pulseGlow 2s ease-in-out infinite alternate;
  }

  @keyframes pulseGlow {
    from {
      box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
    }
    to {
      box-shadow: 0 0 30px rgba(255, 255, 255, 0.4);
    }
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.5);
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\index.css
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\main.jsx
TYPE: .jsx
================================================================================

import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import './index.css'
import { UserProvider } from './context/UserContext'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <UserProvider>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </UserProvider>
  </React.StrictMode>
)


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\main.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\DocLayout.jsx
TYPE: .jsx
================================================================================

export default function DocLayout({ sidebar, children }) {
  return (
    <div className="container py-16">
      <div className="grid lg:grid-cols-[300px_1fr] gap-8">
        <aside className="lg:sticky lg:top-8 lg:h-fit">
          <nav className="glass p-4 rounded-xl2">
            {sidebar}
          </nav>
        </aside>
        <main className="prose prose-slate max-w-none">
          <div className="space-y-8">
            {children}
          </div>
        </main>
      </div>
    </div>
  );
}
  

================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\DocLayout.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\FileUpload.jsx
TYPE: .jsx
================================================================================

import React, { useState, useRef } from 'react';

export default function FileUpload({ 
  onFileSelect, 
  multiple = false, 
  accept = "*/*", 
  maxSize = 10 * 1024 * 1024, // 10MB default
  className = "" 
}) {
  const [dragActive, setDragActive] = useState(false);
  const [files, setFiles] = useState([]);
  const [errors, setErrors] = useState([]);
  const inputRef = useRef(null);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFiles(e.dataTransfer.files);
    }
  };

  const handleChange = (e) => {
    e.preventDefault();
    if (e.target.files && e.target.files[0]) {
      handleFiles(e.target.files);
    }
  };

  const handleFiles = (fileList) => {
    const newFiles = Array.from(fileList);
    const validFiles = [];
    const newErrors = [];

    newFiles.forEach(file => {
      // Check file size
      if (file.size > maxSize) {
        newErrors.push(`${file.name} is too large. Maximum size is ${formatFileSize(maxSize)}`);
        return;
      }

      // Check file type if accept is specified
      if (accept !== "*/*") {
        const acceptedTypes = accept.split(',').map(type => type.trim());
        const fileType = file.type;
        const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
        
        const isAccepted = acceptedTypes.some(type => {
          if (type.startsWith('.')) {
            return fileExtension === type.toLowerCase();
          }
          return fileType === type || fileType.startsWith(type.replace('*', ''));
        });

        if (!isAccepted) {
          newErrors.push(`${file.name} is not an accepted file type`);
          return;
        }
      }

      validFiles.push(file);
    });

    if (validFiles.length > 0) {
      const updatedFiles = multiple ? [...files, ...validFiles] : validFiles;
      setFiles(updatedFiles);
      onFileSelect(multiple ? updatedFiles : validFiles[0]);
    }

    if (newErrors.length > 0) {
      setErrors(newErrors);
      setTimeout(() => setErrors([]), 5000); // Clear errors after 5 seconds
    }
  };

  const removeFile = (index) => {
    const updatedFiles = files.filter((_, i) => i !== index);
    setFiles(updatedFiles);
    onFileSelect(multiple ? updatedFiles : null);
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const onButtonClick = () => {
    inputRef.current?.click();
  };

  return (
    <div className={className}>
      <div
        className={`relative border-2 border-dashed rounded-lg p-6 text-center transition-colors ${
          dragActive 
            ? 'border-blue-400 bg-blue-50' 
            : 'border-gray-300 hover:border-gray-400'
        }`}
        onDragEnter={handleDrag}
        onDragLeave={handleDrag}
        onDragOver={handleDrag}
        onDrop={handleDrop}
      >
        <input
          ref={inputRef}
          type="file"
          multiple={multiple}
          accept={accept}
          onChange={handleChange}
          className="hidden"
        />
        
        <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
          <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth={2} strokeLinecap="round" strokeLinejoin="round" />
        </svg>
        
        <p className="mt-1 text-sm text-gray-600">
          <button
            type="button"
            onClick={onButtonClick}
            className="font-medium text-blue-600 hover:text-blue-500"
          >
            Upload files
          </button>
          {' '}or drag and drop
        </p>
        
        <p className="text-xs text-gray-500">
          {accept !== "*/*" ? `Accepted types: ${accept}` : 'All file types accepted'} • Max size: {formatFileSize(maxSize)}
        </p>
      </div>

      {/* Error Messages */}
      {errors.length > 0 && (
        <div className="mt-4 space-y-2">
          {errors.map((error, index) => (
            <div key={index} className="text-sm text-red-600 bg-red-50 p-2 rounded">
              {error}
            </div>
          ))}
        </div>
      )}

      {/* File List */}
      {files.length > 0 && (
        <div className="mt-4 space-y-2">
          <h4 className="text-sm font-medium text-gray-900">Selected Files:</h4>
          {files.map((file, index) => (
            <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
              <div className="flex items-center space-x-2">
                <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <span className="text-sm text-gray-700">{file.name}</span>
                <span className="text-xs text-gray-500">({formatFileSize(file.size)})</span>
              </div>
              <button
                onClick={() => removeFile(index)}
                className="text-red-500 hover:text-red-700"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\FileUpload.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\GraphView.jsx
TYPE: .jsx
================================================================================

import React, { useMemo, useEffect, useState } from 'react';
import Fuse from 'fuse.js';

// React 19 compatible graph component using SVG
const GraphVisualization = ({ elements, onNodeClick }) => {
  const nodes = elements.filter(el => el.data && !el.data.source);
  const edges = elements.filter(el => el.data && el.data.source);

  const handleNodeClick = (nodeId) => {
    if (onNodeClick) onNodeClick(nodeId);
  };

  if (!elements || elements.length === 0) {
    return (
      <div className="w-full h-full flex items-center justify-center">
        <div className="text-center text-gray-500">
          <p className="text-lg font-semibold mb-2">Graph View</p>
          <p className="text-sm">No data available</p>
        </div>
      </div>
    );
  }

  return (
    <svg width="100%" height="100%" className="bg-transparent">
      {/* Draw edges */}
      {edges.map((edge, index) => (
        <line
          key={`edge-${index}`}
          x1="50"
          y1="50"
          x2="150"
          y2="150"
          stroke="#94a3b8"
          strokeWidth="1"
        />
      ))}
      
      {/* Draw nodes */}
      {nodes.map((node, index) => (
        <g key={`node-${index}`}>
          <circle
            cx={100 + (index * 100)}
            cy={100 + (index * 50)}
            r="20"
            fill="#3b82f6"
            stroke="#1e40af"
            strokeWidth="2"
            style={{ cursor: 'pointer' }}
            onClick={() => handleNodeClick(node.data.id)}
          />
          <text
            x={100 + (index * 100)}
            y={100 + (index * 50) + 5}
            textAnchor="middle"
            fill="white"
            fontSize="12"
            style={{ pointerEvents: 'none' }}
          >
            {node.data.title || node.data.id}
          </text>
        </g>
      ))}
    </svg>
  );
};

// Styling constants
const palette = {
  card: 'rgba(255, 255, 255, 0.1)',
  text: '#ffffff',
  stroke: 'rgba(255, 255, 255, 0.2)'
};

const useGraphElements = (graph, filter) => {
  return useMemo(() => {
    if (!graph) return { elements: [], fuse: null };
    
    const nodes = graph.nodes.map(n => ({ data: n }));
    const nodeSet = new Set(nodes.map(n => n.data.id));
    const edges = graph.edges.filter(e => nodeSet.has(e.source) && nodeSet.has(e.target)).map(e => ({ data: e }));

    // Use actual Fuse.js for search
    const fuse = new Fuse(graph.nodes, { 
      keys: ['title', 'tags'], 
      threshold: 0.3 
    });
    
    return { elements: [...nodes, ...edges], fuse };
  }, [graph, filter]);
};

export default function GraphView({ clientSlug, onOpenDoc }) {
  const [graph, setGraph] = useState(null);
  const [query, setQuery] = useState('');
  const { elements, fuse } = useGraphElements(graph, {});

  useEffect(() => {
    // TODO: Implement actual graph fetching
    // fetch(`/graph/${clientSlug}.json`).then(r => r.json()).then(setGraph).catch(console.error);
    console.log('GraphView: Would fetch graph for clientSlug:', clientSlug);
  }, [clientSlug]);

  useEffect(() => {
    if (!graph || !fuse) return;
    const res = query ? fuse.search(query).map(r => r.item.id) : [];
    // Handle search results here if needed
  }, [query, graph, fuse]);

  return (
    <div className="w-full h-[calc(100vh-120px)] relative">
      <div className="absolute z-10 top-3 left-3 right-3 flex gap-2 items-center">
        <input
          value={query}
          onChange={e => setQuery(e.target.value)}
          placeholder="Search notes or #tags"
          className="flex-1 px-3 py-2 rounded-2xl backdrop-blur-md text-sm"
          style={{ background: palette.card, color: palette.text, border: `1px solid ${palette.stroke}` }}
        />
        <span className="px-3 py-2 rounded-xl text-xs" style={{ background: palette.card, color: palette.text, border: `1px solid ${palette.stroke}` }}>
          {elements.filter(e => e.data && e.data.id).length} nodes
        </span>
      </div>
      <div className="absolute inset-0" style={{ background: 'radial-gradient(1200px 600px at 20% -20%, rgba(155,135,245,0.12), transparent), radial-gradient(800px 400px at 90% 120%, rgba(135,245,225,0.1), transparent)'}} />
      <GraphVisualization
        elements={elements.map(el => ({ ...el, selectable: true }))}
        onNodeClick={onOpenDoc}
      />
    </div>
  );
}

================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\GraphView.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\Header.jsx
TYPE: .jsx
================================================================================

import { Link, useNavigate } from "react-router-dom";
import { useUser } from "../context/UserContext";
import NotificationCenter from "./NotificationCenter";
import { forceClearAuth } from "../utils/auth";

/**
 * Header component with navigation and user authentication status
 * @returns {JSX.Element} Header component with navigation links and user info
 */
export default function Header() {
  const { email, role, signOut } = useUser();
  const navigate = useNavigate();

  const handleLogout = async () => {
    console.log('Logout button clicked');
    try {
      const result = await signOut();
      if (result.error) {
        console.error('Supabase logout error:', result.error);
      }
      console.log('Logout completed, navigating to home');
      navigate('/');
    } catch (error) {
      console.error('Logout error:', error);
      // Force navigation even if there's an error
      navigate('/');
    }
  };

  const handleForceLogout = () => {
    console.log('Force logout clicked');
    forceClearAuth();
    // Force page reload to clear all state
    window.location.href = '/';
  };

  return (
    <header className="glass-nav w-full">
      <div className="mx-auto max-w-6xl px-4 h-16 flex items-center justify-between">
        {/* Brand */}
        <Link to="/" className="flex items-center gap-2 group">
          <div className="relative">
            <img src="https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png" alt="QiAlly" className="h-8 w-8 transition-transform duration-300 group-hover:scale-110" />
            <div className="absolute inset-0 bg-blue-400/20 rounded-full blur-lg group-hover:bg-blue-400/30 transition-all duration-300"></div>
          </div>
          <span className="font-bold text-white text-xl tracking-wide">QiAlly</span>
        </Link>

        {/* Nav */}
        <nav className="flex items-center gap-6 text-sm">
          <Link to="/" className="glass-nav-link">
            Home
          </Link>
          {email ? (
            <>
              <Link to="/client" className="glass-nav-link">
                Dashboard
              </Link>
              <Link to="/projects" className="glass-nav-link">
                Projects
              </Link>
              <Link to="/messages" className="glass-nav-link">
                Messages
              </Link>
              <Link to="/kb" className="glass-nav-link">
                Knowledge Base
              </Link>
              <Link to="/calls" className="glass-nav-link">
                Calls
              </Link>
              <Link to="/billing" className="glass-nav-link">
                Billing
              </Link>
              <Link to="/support" className="glass-nav-link">
                Support
              </Link>
              <Link to="/settings" className="glass-nav-link">
                Settings
              </Link>
              {role === "admin" && (
                <Link to="/admin" className="glass-nav-link">
                  Admin
                </Link>
              )}
            </>
          ) : (
            <>
              <a href="#what-we-offer" className="glass-nav-link">Services</a>
              <a href="#outcomes" className="glass-nav-link">Outcomes</a>
              <a href="#contact" className="glass-nav-link">Contact</a>
            </>
          )}
        </nav>

        {/* User */}
        <div className="flex items-center gap-3">
          {email ? (
            <>
              <NotificationCenter />
              <div className="flex items-center gap-3 glass-card px-4 py-2">
                <div className="relative">
                  <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 grid place-items-center glow-blue">
                    <svg className="w-4 h-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                      <path
                        fillRule="evenodd"
                        d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </div>
                </div>
                <div className="text-xs">
                  <p className="font-medium leading-tight text-white">{email}</p>
                  <p className="text-white/70 capitalize leading-tight">{role}</p>
                </div>
              </div>
              <button
                onClick={handleLogout}
                className="glass-button-primary glow-red"
                type="button"
              >
                Logout
              </button>
              {/* Debug section - remove in production */}
              {process.env.NODE_ENV === 'development' && (
                <div className="flex flex-col gap-1">
                  <button
                    onClick={handleForceLogout}
                    className="text-xs px-2 py-1 bg-red-600 text-white rounded"
                    type="button"
                    title="Force logout (clears all auth data)"
                  >
                    Force Logout
                  </button>
                  <Link
                    to="/debug"
                    className="text-xs px-2 py-1 bg-blue-600 text-white rounded text-center"
                    title="Debug auth state"
                  >
                    Debug
                  </Link>
                  <div className="text-xs text-white/50">
                    Auth: {email ? 'Logged in' : 'Not logged in'}
                  </div>
                </div>
              )}
            </>
          ) : (
            <Link
              to="/login"
              className="glass-button-primary glow-blue"
            >
              Sign In
            </Link>
          )}
        </div>
      </div>
    </header>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\Header.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\Hero.jsx
TYPE: .jsx
================================================================================

export default function Hero() {
  return (
    <section className="relative overflow-hidden isolate min-h-[70vh] flex items-center" data-theme="dark">
      <div className="absolute inset-0 bg-hero-gradient bg-stars" />
      <div className="absolute inset-x-0 top-0 h-1/2 bg-glow-radial pointer-events-none" />
      <div className="container relative z-10 grid md:grid-cols-2 gap-10 py-16">
        <div className="text-left max-w-xl">
          <p className="text-subtext mb-4">QiAlly • Consulting + Client Portal</p>
          <h1 className="font-display text-4xl md:text-6xl leading-tight">
            Practical growth systems <span className="gradient-text">for small teams</span>
          </h1>
          <p className="mt-5 text-lg text-subtext">
            Strategy, ops, and clean execution. We set up tools, workflows, and dashboards so your
            business actually runs.
          </p>
          <ul className="mt-6 grid gap-2 text-sm text-subtext">
            <li>• Fractional ops & systems setup</li>
            <li>• Client portals, tickets, and automations</li>
            <li>• Analytics, receipts, and finance hygiene</li>
          </ul>
          <div className="mt-8 flex flex-wrap items-center gap-3">
            <a className="btn btn-primary" href="#contact">Work with us</a>
            <a className="btn btn-ghost" href="https://portal.qially.com/client">Client login</a>
          </div>
        </div>
        <div className="glass p-4 md:p-6 rounded-xl2">
          <div className="aspect-[16/10] rounded-xl2 bg-black/40 grid place-items-center text-white/60">
            <span>Portal dashboard preview</span>
          </div>
        </div>
      </div>
    </section>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\Hero.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\NotificationCenter.jsx
TYPE: .jsx
================================================================================

import React, { useState, useEffect } from 'react';

export default function NotificationCenter() {
  const [isOpen, setIsOpen] = useState(false);
  const [notifications, setNotifications] = useState([
    {
      id: 1,
      type: 'info',
      title: 'System Update',
      message: 'New features have been added to your dashboard',
      time: '2 minutes ago',
      read: false
    },
    {
      id: 2,
      type: 'success',
      title: 'Payment Successful',
      message: 'Your subscription payment has been processed',
      time: '1 hour ago',
      read: false
    },
    {
      id: 3,
      type: 'warning',
      title: 'Storage Warning',
      message: 'You are approaching your storage limit',
      time: '3 hours ago',
      read: true
    }
  ]);

  const unreadCount = notifications.filter(n => !n.read).length;

  const markAsRead = (id) => {
    setNotifications(prev => 
      prev.map(notification => 
        notification.id === id 
          ? { ...notification, read: true }
          : notification
      )
    );
  };

  const markAllAsRead = () => {
    setNotifications(prev => 
      prev.map(notification => ({ ...notification, read: true }))
    );
  };

  const getNotificationIcon = (type) => {
    switch (type) {
      case 'success':
        return (
          <svg className="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        );
      case 'warning':
        return (
          <svg className="w-5 h-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
        );
      case 'error':
        return (
          <svg className="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        );
      default:
        return (
          <svg className="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        );
    }
  };

  return (
    <div className="relative">
      {/* Notification Bell */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="relative p-3 glass-button hover:glow-blue transition-all duration-300"
      >
        <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-5 5v-5zM10.5 3.75a6 6 0 00-6 6v3.75a6 6 0 01-6 6h.75a6 6 0 006 6h3.75a6 6 0 006-6v-3.75a6 6 0 00-6-6h-3.75z" />
        </svg>
        
        {/* Unread Badge */}
        {unreadCount > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center glow-red">
            {unreadCount > 9 ? '9+' : unreadCount}
          </span>
        )}
      </button>

      {/* Notification Panel */}
      {isOpen && (
        <div className="absolute right-0 mt-3 w-80 glass-modal z-50">
          <div className="p-4 border-b border-white/20">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-white">Notifications</h3>
              {unreadCount > 0 && (
                <button
                  onClick={markAllAsRead}
                  className="text-sm text-blue-300 hover:text-blue-200 transition-colors"
                >
                  Mark all as read
                </button>
              )}
            </div>
          </div>

          <div className="max-h-96 overflow-y-auto">
            {notifications.length === 0 ? (
              <div className="p-4 text-center text-white/60">
                No notifications
              </div>
            ) : (
              <div className="divide-y divide-white/10">
                {notifications.map((notification) => (
                  <div
                    key={notification.id}
                    className={`glass-notification cursor-pointer ${
                      !notification.read ? 'bg-blue-500/10 border-blue-400/30' : ''
                    }`}
                    onClick={() => markAsRead(notification.id)}
                  >
                    <div className="flex items-start space-x-3">
                      <div className="flex-shrink-0">
                        {getNotificationIcon(notification.type)}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between">
                          <p className="text-sm font-medium text-white">
                            {notification.title}
                          </p>
                          {!notification.read && (
                            <div className="w-2 h-2 bg-blue-400 rounded-full glow-blue"></div>
                          )}
                        </div>
                        <p className="text-sm text-white/80 mt-1">
                          {notification.message}
                        </p>
                        <p className="text-xs text-white/60 mt-2">
                          {notification.time}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {notifications.length > 0 && (
            <div className="p-4 border-t border-white/20">
              <button
                onClick={() => setIsOpen(false)}
                className="w-full text-sm text-blue-300 hover:text-blue-200 transition-colors"
              >
                View all notifications
              </button>
            </div>
          )}
        </div>
      )}

      {/* Backdrop */}
      {isOpen && (
        <div
          className="glass-overlay fixed inset-0 z-40"
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\NotificationCenter.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\ProtectedRoute.jsx
TYPE: .jsx
================================================================================

// src/components/ProtectedRoute.jsx
import { useEffect, useState } from 'react';
import { Navigate } from 'react-router-dom';
import { useUser } from '../context/UserContext';

export default function ProtectedRoute({ children, roleRequired }) {
  const { email, role, hydrated } = useUser();
  const [isAuthorized, setIsAuthorized] = useState(null);

  useEffect(() => {
    if (!hydrated) return;

    if (!email) {
      setIsAuthorized(false);
      return;
    }

    if (roleRequired && role !== roleRequired) {
      setIsAuthorized(false);
      return;
    }

    setIsAuthorized(true);
  }, [email, role, hydrated, roleRequired]);

  // Show loading while checking authentication
  if (!hydrated || isAuthorized === null) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-2 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  // Redirect to login if not authenticated
  if (!isAuthorized) {
    return <Navigate to="/login" replace />;
  }

  return children;
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\ProtectedRoute.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\SiteHeader.jsx
TYPE: .jsx
================================================================================

import { Link } from 'react-router-dom';

export default function SiteHeader() {
    return (
      <header className="container py-4 flex items-center justify-between">
        <Link to="/" className="font-semibold">QiAlly</Link>
        <nav className="hidden md:flex items-center gap-6 text-sm">
          <a href="#what-we-do">Services</a>
          <a href="#outcomes">Outcomes</a>
          <a href="#contact">Contact</a>
          <Link className="btn btn-ghost" to="/login">Login</Link>
        </nav>
      </header>
    );
  }
  

================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\SiteHeader.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\ThemeProvider.jsx
TYPE: .jsx
================================================================================

import { createContext, useContext, useEffect, useState } from 'react';

const ThemeContext = createContext();

export function useTheme() {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}

export default function ThemeProvider({ children, defaultTheme = 'light' }) {
  const [theme, setTheme] = useState(defaultTheme);

  useEffect(() => {
    const root = document.documentElement;
    root.setAttribute('data-theme', theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };

  return (
    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\ThemeProvider.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\components\ThemeToggle.jsx
TYPE: .jsx
================================================================================

import { useTheme } from './ThemeProvider';

export default function ThemeToggle() {
  const { theme, toggleTheme } = useTheme();

  return (
    <button
      onClick={toggleTheme}
      className="btn btn-ghost btn-sm"
      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} theme`}
    >
      {theme === 'light' ? (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
      ) : (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      )}
    </button>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\components\ThemeToggle.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\context\UserContext.jsx
TYPE: .jsx
================================================================================

// src/context/UserContext.jsx
import React, { createContext, useContext, useEffect, useState } from 'react'
import { supabase } from '../lib/supabase'
import { forceClearAuth } from '../utils/auth'

const UserContext = createContext(null)

// Test mode - set to true for immediate testing without Supabase
const TEST_MODE = false

export const UserProvider = ({ children }) => {
  const [email, setEmail] = useState(null)
  const [role, setRole] = useState('guest')
  const [hydrated, setHydrated] = useState(false)

  // map email to role (temporary; move to user_metadata later)
  const applyRole = (userEmail) => {
    const admins = ['admin@qially.me', 'crice4485@gmail.com']
    const clients = ['info@qially.me', 'client1@email.com']
    if (admins.includes(userEmail)) return 'admin'
    if (clients.includes(userEmail)) return 'client'
    return 'guest'
  }

  useEffect(() => {
    let mounted = true

    if (TEST_MODE) {
      // Test mode - skip Supabase and set hydrated immediately
      setHydrated(true)
      return
    }

    // 1) initial session
    supabase.auth.getSession().then(async ({ data, error }) => {
      if (error) {
        console.error('Error getting session:', error)
        // Clear any stale auth data
        forceClearAuth()
      }
      
      const e = data.session?.user?.email ?? null
      if (!mounted) return
      setEmail(e)
      
      if (e) {
        // Fetch user role from profiles table
        try {
          const { data: profileData, error: profileError } = await supabase
            .from('profiles')
            .select('role')
            .eq('email', e)
            .single()
          
          if (profileError) {
            console.error('Error fetching user role:', profileError)
            // If we can't fetch the profile, the session might be invalid
            if (profileError.code === 'PGRST116' || profileError.message.includes('JWT')) {
              console.log('Invalid session detected, clearing auth data')
              forceClearAuth()
              setEmail(null)
              setRole('guest')
            } else {
              setRole('guest')
            }
          } else {
            setRole(profileData?.role || 'guest')
          }
        } catch (error) {
          console.error('Error fetching user role:', error)
          setRole('guest')
        }
      } else {
        setRole('guest')
      }
      
      setHydrated(true)
    })

    // 2) reactive updates
    const { data: sub } = supabase.auth.onAuthStateChange(async (_event, session) => {
      const e = session?.user?.email ?? null
      setEmail(e)
      
      if (e) {
        // Fetch user role from profiles table
        try {
          const { data: profileData, error: profileError } = await supabase
            .from('profiles')
            .select('role')
            .eq('email', e)
            .single()
          
          if (profileError) {
            console.error('Error fetching user role:', profileError)
            // If we can't fetch the profile, the session might be invalid
            if (profileError.code === 'PGRST116' || profileError.message.includes('JWT')) {
              console.log('Invalid session detected, clearing auth data')
              forceClearAuth()
              setEmail(null)
              setRole('guest')
            } else {
              setRole('guest')
            }
          } else {
            setRole(profileData?.role || 'guest')
          }
        } catch (error) {
          console.error('Error fetching user role:', error)
          setRole('guest')
        }
      } else {
        setRole('guest')
      }
    })

    return () => {
      mounted = false
      sub?.subscription?.unsubscribe?.()
    }
  }, [])

  // Authentication methods
  const signIn = async (email, password) => {
    if (TEST_MODE) {
      // Test mode - immediately authenticate if email is in our test list
      const testEmails = ['admin@qially.me', 'crice4485@gmail.com', 'info@qially.me', 'client1@email.com']
      
      if (testEmails.includes(email)) {
        setEmail(email)
        setRole(applyRole(email))
        return { data: { user: { email } }, error: null }
      } else {
        return { data: null, error: { message: 'Invalid test email. Use: admin@qially.me, crice4485@gmail.com, info@qially.me, or client1@email.com' } }
      }
    }

    // Real Supabase authentication
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    })
    return { data, error }
  }

  const signUp = async (email, password) => {
    if (TEST_MODE) {
      // Test mode - treat signup same as signin for testing
      return signIn(email, password)
    }

    const { data, error } = await supabase.auth.signUp({
      email,
      password
    })
    return { data, error }
  }

  const signOut = async () => {
    if (TEST_MODE) {
      // Test mode - immediately sign out
      setEmail(null)
      setRole('guest')
      return { error: null }
    }

    try {
      // Real Supabase sign out
      const { error } = await supabase.auth.signOut()
      
      // Always update local state regardless of Supabase response
      setEmail(null)
      setRole('guest')
      
      // Clear any stored session data
      forceClearAuth()
      
      console.log('User signed out successfully')
      return { error }
    } catch (error) {
      console.error('Error during sign out:', error)
      // Still clear local state even if Supabase fails
      setEmail(null)
      setRole('guest')
      return { error }
    }
  }

  const resetPassword = async (email) => {
    if (TEST_MODE) {
      // Test mode - just return success
      return { data: { message: 'Test mode: Password reset email would be sent' }, error: null }
    }

    const { data, error } = await supabase.auth.resetPasswordForEmail(email)
    return { data, error }
  }

  return (
    <UserContext.Provider value={{ 
      email, 
      role, 
      hydrated,
      signIn,
      signUp,
      signOut,
      resetPassword,
      testMode: TEST_MODE
    }}>
      {children}
    </UserContext.Provider>
  )
}

export const useUser = () => useContext(UserContext)


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\context\UserContext.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\lib\api.js
TYPE: .js
================================================================================

import { supabase } from './supabase';

/**
 * API utility function with error handling and Supabase integration
 * @param {string} path - API endpoint path (for future use with custom API routes)
 * @param {Object} opts - Fetch options
 * @returns {Promise<Object>} API response or error object
 */
export async function api(path, opts = {}) {
  // For now, this is a placeholder for future API calls
  // Most data operations will be done directly through Supabase client
  try {
    const res = await fetch(path, { 
      credentials: "include", 
      ...opts 
    });
    
    if (res.status === 401) {
      // Redirect to login if unauthorized
      window.location.href = "/login";
      return;
    }

    // Try JSON; if it fails, fall back to text.
    const text = await res.text();
    try {
      return JSON.parse(text);
    } catch {
      return { error: true, message: "Invalid JSON", body: text };
    }
  } catch (err) {
    // Network or CORS error: surface a sane shape
    return { error: true, message: "Network error", detail: String(err) };
  }
}

/**
 * Get current user from Supabase
 * @returns {Promise<Object>} User object or null
 */
export async function getCurrentUser() {
  const { data: { user }, error } = await supabase.auth.getUser();
  if (error) {
    console.error('Error getting user:', error);
    return null;
  }
  return user;
}

/**
 * Get user session from Supabase
 * @returns {Promise<Object>} Session object or null
 */
export async function getSession() {
  const { data: { session }, error } = await supabase.auth.getSession();
  if (error) {
    console.error('Error getting session:', error);
    return null;
  }
  return session;
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\lib\api.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\lib\kbApi.js
TYPE: .js
================================================================================

import { supabase } from './supabase';

// Get client slug from user profile
export async function getClientSlug() {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return null;

  // Get user profile to determine client slug
  const { data: profile } = await supabase
    .from('profiles')
    .select('client_slug, role')
    .eq('email', user.email)
    .single();

  if (profile?.client_slug) {
    return profile.client_slug;
  }

  // Fallback: derive from email domain or role
  if (profile?.role === 'admin') {
    return 'admin'; // Admin can access all KBs
  }

  // For testing, return a default client slug
  return 'zy';
}

// List documents for a specific client
export async function listDocs(clientSlug) {
  try {
    const { data, error } = await supabase
      .from('kb_files')
      .select('*')
      .eq('client_slug', clientSlug)
      .order('title');

    if (error) {
      console.error('Error fetching KB documents:', error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error('Error in listDocs:', error);
    return [];
  }
}

// Get signed URL for a document
export async function getSignedUrl(path) {
  try {
    const { data, error } = await supabase.storage
      .from('kb')
      .createSignedUrl(path, 3600); // 1 hour expiry

    if (error) {
      console.error('Error getting signed URL:', error);
      throw error;
    }

    return data.signedUrl;
  } catch (error) {
    console.error('Error in getSignedUrl:', error);
    throw error;
  }
}

// Search documents
export async function searchDocs(clientSlug, query) {
  try {
    const { data, error } = await supabase
      .from('kb_files')
      .select('*')
      .eq('client_slug', clientSlug)
      .or(`title.ilike.%${query}%,tags.cs.{${query}}`)
      .order('title');

    if (error) {
      console.error('Error searching KB documents:', error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error('Error in searchDocs:', error);
    return [];
  }
}

// Get document content
export async function getDocContent(path) {
  try {
    const signedUrl = await getSignedUrl(path);
    const response = await fetch(signedUrl);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return await response.text();
  } catch (error) {
    console.error('Error fetching document content:', error);
    throw error;
  }
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\lib\kbApi.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\lib\messagesApi.js
TYPE: .js
================================================================================

import { supabase } from './supabase';

// Get conversations for the current user
export async function getConversations() {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return [];

  try {
    const { data, error } = await supabase
      .from('conversations')
      .select(`
        *,
        participants:conversation_participants(
          user_id,
          profiles(email, full_name, role)
        ),
        messages:messages(
          id,
          content,
          created_at,
          sender_id,
          profiles(email, full_name)
        )
      `)
      .or(`participants.user_id.eq.${user.id}`)
      .order('updated_at', { ascending: false });

    if (error) {
      console.error('Error fetching conversations:', error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error('Error in getConversations:', error);
    return [];
  }
}

// Get messages for a specific conversation
export async function getMessages(conversationId) {
  try {
    const { data, error } = await supabase
      .from('messages')
      .select(`
        *,
        profiles(email, full_name)
      `)
      .eq('conversation_id', conversationId)
      .order('created_at', { ascending: true });

    if (error) {
      console.error('Error fetching messages:', error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error('Error in getMessages:', error);
    return [];
  }
}

// Send a new message
export async function sendMessage(conversationId, content) {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) throw new Error('User not authenticated');

  try {
    const { data, error } = await supabase
      .from('messages')
      .insert({
        conversation_id: conversationId,
        sender_id: user.id,
        content: content
      })
      .select()
      .single();

    if (error) {
      console.error('Error sending message:', error);
      throw error;
    }

    // Update conversation's updated_at timestamp
    await supabase
      .from('conversations')
      .update({ updated_at: new Date().toISOString() })
      .eq('id', conversationId);

    return data;
  } catch (error) {
    console.error('Error in sendMessage:', error);
    throw error;
  }
}

// Create a new conversation
export async function createConversation(title, participantEmails = []) {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) throw new Error('User not authenticated');

  try {
    // Start a transaction
    const { data: conversation, error: convError } = await supabase
      .from('conversations')
      .insert({
        title: title,
        created_by: user.id
      })
      .select()
      .single();

    if (convError) throw convError;

    // Add participants
    const participants = [user.id]; // Always include the creator
    
    // Get user IDs for participant emails
    if (participantEmails.length > 0) {
      const { data: users, error: usersError } = await supabase
        .from('profiles')
        .select('id')
        .in('email', participantEmails);

      if (usersError) throw usersError;
      
      participants.push(...users.map(u => u.id));
    }

    // Insert participants
    const participantData = participants.map(userId => ({
      conversation_id: conversation.id,
      user_id: userId
    }));

    const { error: partError } = await supabase
      .from('conversation_participants')
      .insert(participantData);

    if (partError) throw partError;

    return conversation;
  } catch (error) {
    console.error('Error in createConversation:', error);
    throw error;
  }
}

// Subscribe to real-time message updates
export function subscribeToMessages(conversationId, callback) {
  return supabase
    .channel(`messages:${conversationId}`)
    .on(
      'postgres_changes',
      {
        event: 'INSERT',
        schema: 'public',
        table: 'messages',
        filter: `conversation_id=eq.${conversationId}`
      },
      callback
    )
    .subscribe();
}

// Subscribe to conversation updates
export function subscribeToConversations(callback) {
  return supabase
    .channel('conversations')
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table: 'conversations'
      },
      callback
    )
    .subscribe();
}

// Mark conversation as read
export async function markConversationAsRead(conversationId) {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return;

  try {
    await supabase
      .from('conversation_participants')
      .update({ last_read_at: new Date().toISOString() })
      .eq('conversation_id', conversationId)
      .eq('user_id', user.id);
  } catch (error) {
    console.error('Error marking conversation as read:', error);
  }
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\lib\messagesApi.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\lib\staticKbApi.js
TYPE: .js
================================================================================

import { supabase } from './supabase';

// Load access control configuration
let accessControlConfig = null;

async function loadAccessControl() {
  if (accessControlConfig) return accessControlConfig;
  
  try {
    const response = await fetch('/kb/access-control.json');
    if (response.ok) {
      accessControlConfig = await response.json();
      return accessControlConfig;
    }
  } catch (error) {
    console.error('Error loading access control config:', error);
  }
  
  // Fallback to default config
  return {
    'zy': {
      members: ['info@qially.me', 'client1@email.com'],
      public: false,
      name: 'QiAlly'
    }
  };
}

// Check if user has access to a specific client's knowledge base
export async function checkClientAccess(clientSlug) {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return false;

  const config = await loadAccessControl();
  const clientConfig = config[clientSlug];
  
  if (!clientConfig) return false;
  
  // Check if user is a member
  if (clientConfig.members.includes(user.email)) {
    return true;
  }
  
  // Check if user is admin
  const { data: profile } = await supabase
    .from('profiles')
    .select('role')
    .eq('email', user.email)
    .single();
    
  if (profile?.role === 'admin') {
    return true;
  }
  
  return false;
}

// Get all clients the user has access to
export async function getUserClients() {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return [];

  const config = await loadAccessControl();
  const accessibleClients = [];

  for (const [clientSlug, clientConfig] of Object.entries(config)) {
    if (clientConfig.members.includes(user.email)) {
      accessibleClients.push({
        slug: clientSlug,
        name: clientConfig.name || clientSlug,
        description: clientConfig.description || ''
      });
    }
  }

  // Check if user is admin
  const { data: profile } = await supabase
    .from('profiles')
    .select('role')
    .eq('email', user.email)
    .single();
    
  if (profile?.role === 'admin') {
    // Admin can access all clients
    return Object.entries(config).map(([clientSlug, clientConfig]) => ({
      slug: clientSlug,
      name: clientConfig.name || clientSlug,
      description: clientConfig.description || ''
    }));
  }

  return accessibleClients;
}

// Get client knowledge base index
export async function getClientKBIndex(clientSlug) {
  const hasAccess = await checkClientAccess(clientSlug);
  if (!hasAccess) {
    throw new Error('Access denied');
  }

  try {
    const response = await fetch(`/kb/${clientSlug}/search-index.json`);
    if (!response.ok) {
      throw new Error('Failed to load knowledge base index');
    }
    
    const documents = await response.json();
    return documents;
  } catch (error) {
    console.error('Error loading KB index:', error);
    return [];
  }
}

// Get document content
export async function getDocumentContent(clientSlug, documentPath) {
  const hasAccess = await checkClientAccess(clientSlug);
  if (!hasAccess) {
    throw new Error('Access denied');
  }

  try {
    const response = await fetch(`/kb/${clientSlug}/${documentPath}.json`);
    if (!response.ok) {
      throw new Error('Document not found');
    }
    
    const document = await response.json();
    return document;
  } catch (error) {
    console.error('Error loading document:', error);
    throw error;
  }
}

// Search documents within a client's knowledge base
export async function searchClientDocuments(clientSlug, query) {
  const hasAccess = await checkClientAccess(clientSlug);
  if (!hasAccess) {
    throw new Error('Access denied');
  }

  try {
    const documents = await getClientKBIndex(clientSlug);
    
    if (!query) return documents;
    
    // Simple search implementation
    const searchTerm = query.toLowerCase();
    return documents.filter(doc => 
      doc.title.toLowerCase().includes(searchTerm) ||
      doc.description.toLowerCase().includes(searchTerm) ||
      doc.tags.some(tag => tag.toLowerCase().includes(searchTerm)) ||
      doc.content.toLowerCase().includes(searchTerm)
    );
  } catch (error) {
    console.error('Error searching documents:', error);
    return [];
  }
}

// Get document HTML URL
export function getDocumentUrl(clientSlug, documentPath) {
  return `/kb/${clientSlug}/${documentPath}.html`;
}

// Get client knowledge base URL
export function getClientKBUrl(clientSlug) {
  return `/kb/${clientSlug}/index.html`;
}

// Get main knowledge base portal URL
export function getMainKBUrl() {
  return '/kb/index.html';
}

// Check if static knowledge base is available
export async function isStaticKBAvailable() {
  try {
    const response = await fetch('/kb/access-control.json');
    return response.ok;
  } catch (error) {
    return false;
  }
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\lib\staticKbApi.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\lib\supabase.js
TYPE: .js
================================================================================

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.warn('Missing Supabase environment variables. Please check your environment configuration.')
}

export const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
})


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\lib\supabase.js
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\AdminPanel.jsx
TYPE: .jsx
================================================================================

import { useUser } from '../context/UserContext'

const AdminPanel = () => {
  const { email, role } = useUser()

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold gradient-text mb-2">Admin Panel</h1>
          <p className="text-subtext">Welcome back, {email}</p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="glass p-6 rounded-xl2">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-subtext text-sm">Total Users</p>
                <p className="text-3xl font-bold text-white">156</p>
              </div>
              <div className="w-12 h-12 bg-blue-500/20 rounded-xl flex items-center justify-center">
                <svg className="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                </svg>
              </div>
            </div>
          </div>

          <div className="glass p-6 rounded-xl2">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-subtext text-sm">Active Sessions</p>
                <p className="text-3xl font-bold text-white">23</p>
              </div>
              <div className="w-12 h-12 bg-green-500/20 rounded-xl flex items-center justify-center">
                <svg className="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
          </div>

          <div className="glass p-6 rounded-xl2">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-subtext text-sm">System Status</p>
                <p className="text-3xl font-bold text-green-400">Online</p>
              </div>
              <div className="w-12 h-12 bg-green-500/20 rounded-xl flex items-center justify-center">
                <svg className="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="glass p-6 rounded-xl2 mb-8">
          <h2 className="text-xl font-semibold text-white mb-4">Quick Actions</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <button className="btn btn-primary">Add User</button>
            <button className="btn btn-ghost">View Logs</button>
            <button className="btn btn-ghost">System Settings</button>
            <button className="btn btn-ghost">Backup Data</button>
          </div>
        </div>

        {/* Recent Activity */}
        <div className="glass p-6 rounded-xl2">
          <h2 className="text-xl font-semibold text-white mb-4">System Activity</h2>
          <div className="space-y-4">
            <div className="flex items-center space-x-4 p-4 bg-white/5 rounded-xl">
              <div className="w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </div>
              <div className="flex-1">
                <p className="font-medium text-white">New user registered</p>
                <p className="text-sm text-subtext">john.doe@example.com joined the platform</p>
              </div>
              <span className="text-sm text-subtext">5 minutes ago</span>
            </div>

            <div className="flex items-center space-x-4 p-4 bg-white/5 rounded-xl">
              <div className="w-10 h-10 bg-yellow-500/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div className="flex-1">
                <p className="font-medium text-white">System warning</p>
                <p className="text-sm text-subtext">High memory usage detected</p>
              </div>
              <span className="text-sm text-subtext">1 hour ago</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default AdminPanel


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\AdminPanel.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Billing.jsx
TYPE: .jsx
================================================================================

import React, { useState, useEffect } from 'react';
import { useUser } from '../context/UserContext';

export default function Billing() {
  const { email, role } = useUser();
  const [activeTab, setActiveTab] = useState('overview');
  const [subscription, setSubscription] = useState({
    plan: 'Professional',
    status: 'active',
    nextBilling: '2024-02-15',
    amount: 99.00
  });

  const tabs = [
    { id: 'overview', name: 'Overview', icon: '📊' },
    { id: 'invoices', name: 'Invoices', icon: '📄' },
    { id: 'payments', name: 'Payment Methods', icon: '💳' },
    { id: 'usage', name: 'Usage', icon: '📈' }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Billing & Payments</h1>
          <p className="mt-2 text-gray-600">Manage your subscription, invoices, and payment methods</p>
        </div>

        {/* Tab Navigation */}
        <div className="mb-8">
          <nav className="flex space-x-8">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 px-3 py-2 rounded-lg font-medium transition-colors ${
                  activeTab === tab.id
                    ? 'bg-blue-100 text-blue-700'
                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                }`}
              >
                <span>{tab.icon}</span>
                <span>{tab.name}</span>
              </button>
            ))}
          </nav>
        </div>

        {/* Tab Content */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          {activeTab === 'overview' && (
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">Billing Overview</h2>
              
              {/* Current Plan */}
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 mb-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">{subscription.plan} Plan</h3>
                    <p className="text-gray-600">${subscription.amount}/month</p>
                    <p className="text-sm text-gray-500">Next billing: {subscription.nextBilling}</p>
                  </div>
                  <div className="text-right">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                      subscription.status === 'active' 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {subscription.status}
                    </span>
                  </div>
                </div>
              </div>

              {/* Quick Actions */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <button className="flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  Upgrade Plan
                </button>
                <button className="flex items-center justify-center px-4 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Download Invoice
                </button>
                <button className="flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                  </svg>
                  Add Payment Method
                </button>
              </div>

              {/* Recent Activity */}
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Recent Activity</h3>
                <div className="space-y-3">
                  {[
                    { type: 'Payment', amount: '$99.00', date: 'Jan 15, 2024', status: 'Completed' },
                    { type: 'Invoice', amount: '$99.00', date: 'Jan 15, 2024', status: 'Paid' },
                    { type: 'Plan Change', amount: 'Upgrade', date: 'Jan 10, 2024', status: 'Processed' }
                  ].map((activity, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <div>
                          <p className="font-medium text-gray-900">{activity.type}</p>
                          <p className="text-sm text-gray-600">{activity.date}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="font-medium text-gray-900">{activity.amount}</p>
                        <p className="text-sm text-green-600">{activity.status}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'invoices' && (
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">Invoices</h2>
              
              <div className="space-y-4">
                {[
                  { id: 'INV-001', date: 'Jan 15, 2024', amount: '$99.00', status: 'Paid' },
                  { id: 'INV-002', date: 'Dec 15, 2023', amount: '$99.00', status: 'Paid' },
                  { id: 'INV-003', date: 'Nov 15, 2023', amount: '$49.00', status: 'Paid' }
                ].map((invoice) => (
                  <div key={invoice.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-4">
                      <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">{invoice.id}</p>
                        <p className="text-sm text-gray-600">{invoice.date}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-4">
                      <span className="font-medium text-gray-900">{invoice.amount}</span>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        invoice.status === 'Paid' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {invoice.status}
                      </span>
                      <button className="text-blue-600 hover:text-blue-800">
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'payments' && (
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">Payment Methods</h2>
              
              <div className="space-y-4">
                {/* Current Payment Method */}
                <div className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                        </svg>
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">•••• •••• •••• 4242</p>
                        <p className="text-sm text-gray-600">Expires 12/25</p>
                      </div>
                    </div>
                    <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">
                      Default
                    </span>
                  </div>
                </div>

                {/* Add New Payment Method */}
                <button className="w-full p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-gray-400 hover:text-gray-700 transition-colors">
                  <div className="flex items-center justify-center space-x-2">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    <span>Add New Payment Method</span>
                  </div>
                </button>
              </div>
            </div>
          )}

          {activeTab === 'usage' && (
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">Usage Analytics</h2>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="bg-blue-50 rounded-lg p-4">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">API Calls</h3>
                  <p className="text-3xl font-bold text-blue-600">1,234</p>
                  <p className="text-sm text-gray-600">This month</p>
                </div>
                <div className="bg-green-50 rounded-lg p-4">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Storage Used</h3>
                  <p className="text-3xl font-bold text-green-600">2.5 GB</p>
                  <p className="text-sm text-gray-600">of 10 GB limit</p>
                </div>
                <div className="bg-purple-50 rounded-lg p-4">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Active Users</h3>
                  <p className="text-3xl font-bold text-purple-600">5</p>
                  <p className="text-sm text-gray-600">Team members</p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Billing.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Calls.jsx
TYPE: .jsx
================================================================================

import React, { useState, useEffect } from 'react';
import { useUser } from '../context/UserContext';

export default function Calls() {
  const { email, role } = useUser();
  const [activeCall, setActiveCall] = useState(null);
  const [callHistory, setCallHistory] = useState([]);
  const [isInCall, setIsInCall] = useState(false);

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Calls & Conferencing</h1>
          <p className="mt-2 text-gray-600">Voice calls, video meetings, and conference management</p>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Call Controls */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">Call Center</h2>
              
              {!isInCall ? (
                <div className="space-y-4">
                  {/* Quick Actions */}
                  <div className="grid grid-cols-2 gap-4">
                    <button className="flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                      <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                      </svg>
                      Voice Call
                    </button>
                    <button className="flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                      <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                      Video Call
                    </button>
                  </div>

                  {/* Dial Pad */}
                  <div className="mt-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-3">Dial Pad</h3>
                    <div className="grid grid-cols-3 gap-2 max-w-xs">
                      {[1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'].map((num) => (
                        <button
                          key={num}
                          className="px-4 py-3 text-lg font-medium bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                        >
                          {num}
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Recent Contacts */}
                  <div className="mt-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-3">Recent Contacts</h3>
                    <div className="space-y-2">
                      {[
                        { name: 'John Doe', phone: '+1 (555) 123-4567', lastCall: '2 hours ago' },
                        { name: 'Jane Smith', phone: '+1 (555) 987-6543', lastCall: '1 day ago' },
                        { name: 'Mike Johnson', phone: '+1 (555) 456-7890', lastCall: '3 days ago' }
                      ].map((contact, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div>
                            <p className="font-medium text-gray-900">{contact.name}</p>
                            <p className="text-sm text-gray-600">{contact.phone}</p>
                          </div>
                          <div className="flex items-center space-x-2">
                            <span className="text-xs text-gray-500">{contact.lastCall}</span>
                            <button className="p-2 text-green-600 hover:bg-green-50 rounded-lg">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                              </svg>
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-12">
                  <div className="w-16 h-16 bg-red-600 rounded-full mx-auto mb-4 flex items-center justify-center">
                    <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">Call in Progress</h3>
                  <p className="text-gray-600 mb-4">Duration: 00:05:32</p>
                  <button 
                    onClick={() => setIsInCall(false)}
                    className="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                  >
                    End Call
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Call History & Schedule */}
          <div className="space-y-6">
            {/* Call History */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Call History</h3>
              <div className="space-y-3">
                {[
                  { type: 'Incoming', contact: 'John Doe', duration: '5:32', time: '2 hours ago', status: 'completed' },
                  { type: 'Outgoing', contact: 'Jane Smith', duration: '12:45', time: '1 day ago', status: 'completed' },
                  { type: 'Missed', contact: 'Mike Johnson', duration: '--', time: '3 days ago', status: 'missed' }
                ].map((call, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className={`w-3 h-3 rounded-full ${
                        call.status === 'completed' ? 'bg-green-500' : 'bg-red-500'
                      }`}></div>
                      <div>
                        <p className="font-medium text-gray-900">{call.contact}</p>
                        <p className="text-sm text-gray-600">{call.type} • {call.duration}</p>
                      </div>
                    </div>
                    <span className="text-xs text-gray-500">{call.time}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Scheduled Meetings */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Scheduled Meetings</h3>
              <div className="space-y-3">
                {[
                  { title: 'Project Review', time: 'Tomorrow 10:00 AM', participants: 3 },
                  { title: 'Client Consultation', time: 'Friday 2:00 PM', participants: 2 },
                  { title: 'Team Standup', time: 'Monday 9:00 AM', participants: 5 }
                ].map((meeting, index) => (
                  <div key={index} className="p-3 bg-blue-50 rounded-lg">
                    <p className="font-medium text-gray-900">{meeting.title}</p>
                    <p className="text-sm text-gray-600">{meeting.time}</p>
                    <p className="text-xs text-gray-500">{meeting.participants} participants</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Calls.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Client.jsx
TYPE: .jsx
================================================================================

import { useUser } from '../context/UserContext';
import { useState } from 'react';

export default function Client() {
  const { email, role } = useUser();
  const [activeTab, setActiveTab] = useState('overview');

  const projects = [
    { id: 1, name: 'Process Optimization', status: 'In Progress', progress: 75, dueDate: '2024-02-15' },
    { id: 2, name: 'System Integration', status: 'Planning', progress: 25, dueDate: '2024-03-01' },
    { id: 3, name: 'Workflow Automation', status: 'Completed', progress: 100, dueDate: '2024-01-20' },
  ];

  const recentActivity = [
    { id: 1, type: 'update', message: 'Process Optimization project updated', time: '2 hours ago' },
    { id: 2, type: 'comment', message: 'New comment on System Integration', time: '1 day ago' },
    { id: 3, type: 'milestone', message: 'Workflow Automation completed', time: '3 days ago' },
  ];

  const renderOverview = () => (
    <div className="space-y-6">
      {/* Welcome Section */}
      <div className="glass-card p-6 text-center glow-blue">
        <h2 className="text-3xl font-bold text-white mb-2">Welcome back, {email?.split('@')[0]}! 👋</h2>
        <p className="text-white/80 text-lg">Here's what's happening with your projects today.</p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="glass-card p-6 glow-blue">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-white/70">Active Projects</p>
              <p className="text-3xl font-bold text-white">3</p>
            </div>
            <div className="w-12 h-12 bg-blue-500/20 rounded-xl flex items-center justify-center glow-blue">
              <svg className="w-6 h-6 text-blue-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </div>
          </div>
        </div>

        <div className="glass-card p-6 glow-green">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-white/70">Tasks Due This Week</p>
              <p className="text-3xl font-bold text-white">5</p>
            </div>
            <div className="w-12 h-12 bg-green-500/20 rounded-xl flex items-center justify-center glow-green">
              <svg className="w-6 h-6 text-green-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
              </svg>
            </div>
          </div>
        </div>

        <div className="glass-card p-6 glow-purple">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-white/70">Messages</p>
              <p className="text-3xl font-bold text-white">2</p>
            </div>
            <div className="w-12 h-12 bg-purple-500/20 rounded-xl flex items-center justify-center glow-purple">
              <svg className="w-6 h-6 text-purple-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
              </svg>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="glass-card p-6">
        <h3 className="text-xl font-semibold text-white mb-6">Recent Activity</h3>
        <div className="space-y-4">
          {recentActivity.map((activity) => (
            <div key={activity.id} className="glass-notification">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center glow-blue">
                  <svg className="w-4 h-4 text-blue-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="flex-1">
                  <p className="text-sm font-medium text-white">{activity.message}</p>
                  <p className="text-xs text-white/60">{activity.time}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderProjects = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900">Your Projects</h2>
        <button className="btn btn-primary">New Project</button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {projects.map((project) => (
          <div key={project.id} className="bg-white rounded-xl p-6 shadow-sm border">
            <div className="flex justify-between items-start mb-4">
              <h3 className="text-lg font-semibold text-gray-900">{project.name}</h3>
              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                project.status === 'Completed' ? 'bg-green-100 text-green-800' :
                project.status === 'In Progress' ? 'bg-blue-100 text-blue-800' :
                'bg-yellow-100 text-yellow-800'
              }`}>
                {project.status}
              </span>
            </div>
            
            <div className="mb-4">
              <div className="flex justify-between text-sm text-gray-600 mb-1">
                <span>Progress</span>
                <span>{project.progress}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${project.progress}%` }}
                ></div>
              </div>
            </div>

            <div className="flex justify-between items-center text-sm text-gray-600">
              <span>Due: {project.dueDate}</span>
              <button className="text-blue-600 hover:text-blue-800">View Details</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderMessages = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900">Messages</h2>
        <button className="btn btn-primary">New Message</button>
      </div>

      <div className="bg-white rounded-xl shadow-sm border">
        <div className="p-6 border-b">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
              <span className="text-blue-600 font-semibold">CD</span>
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-gray-900">Cody from QiAlly</h3>
              <p className="text-sm text-gray-600">Updated the process optimization timeline</p>
            </div>
            <span className="text-xs text-gray-500">2 hours ago</span>
          </div>
        </div>

        <div className="p-6 border-b">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
              <span className="text-green-600 font-semibold">SM</span>
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-gray-900">Sarah Manager</h3>
              <p className="text-sm text-gray-600">Please review the latest workflow changes</p>
            </div>
            <span className="text-xs text-gray-500">1 day ago</span>
          </div>
        </div>

        <div className="p-6">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
              <span className="text-purple-600 font-semibold">JS</span>
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-gray-900">John Support</h3>
              <p className="text-sm text-gray-600">Your system integration is ready for testing</p>
            </div>
            <span className="text-xs text-gray-500">3 days ago</span>
          </div>
        </div>
      </div>
    </div>
  );

  const renderSettings = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900">Account Settings</h2>
      
      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Profile Information</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input 
              type="email" 
              value={email} 
              disabled
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <input 
              type="text" 
              value={role} 
              disabled
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
            />
          </div>
        </div>
        </div>

      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Preferences</h3>
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="font-medium text-gray-900">Email Notifications</p>
              <p className="text-sm text-gray-600">Receive updates about your projects</p>
            </div>
            <button className="relative inline-flex h-6 w-11 items-center rounded-full bg-blue-600">
              <span className="inline-block h-4 w-4 transform rounded-full bg-white transition translate-x-6"></span>
            </button>
          </div>
          <div className="flex items-center justify-between">
            <div>
              <p className="font-medium text-gray-900">SMS Notifications</p>
              <p className="text-sm text-gray-600">Receive urgent updates via SMS</p>
            </div>
            <button className="relative inline-flex h-6 w-11 items-center rounded-full bg-gray-200">
              <span className="inline-block h-4 w-4 transform rounded-full bg-white transition translate-x-1"></span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen animated-bg">
      {/* Header */}
      <div className="glass-nav">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-white">Client Dashboard</h1>
              <p className="text-white/80">Welcome back, {email}</p>
            </div>
            <div className="flex items-center space-x-4">
              <button className="glass-button glow-blue">Help</button>
              <button className="glass-button-primary glow-green">Contact Support</button>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="glass-nav">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8">
            {[
              { id: 'overview', name: 'Overview', icon: '📊' },
              { id: 'projects', name: 'Projects', icon: '📁' },
              { id: 'messages', name: 'Messages', icon: '💬' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`glass-tab ${activeTab === tab.id ? 'active' : ''}`}
              >
                <span className="flex items-center space-x-2">
                  <span>{tab.icon}</span>
                  <span>{tab.name}</span>
                </span>
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="glass-card p-8">
          {activeTab === 'overview' && renderOverview()}
          {activeTab === 'projects' && renderProjects()}
          {activeTab === 'messages' && renderMessages()}
        </div>
      </div>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Client.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\ClientDash.jsx
TYPE: .jsx
================================================================================

// src/pages/ClientDash.jsx
import { useUser } from "../context/UserContext";

export default function ClientDash() {
  const { user, email, role } = useUser();

  return (
    <div className="p-6">
      <h1 className="text-xl font-semibold">Client Dashboard</h1>
      <p className="mt-2 opacity-80">Signed in as: {email ?? "…"}</p>
      <p className="mt-1 opacity-80">Role: {role}</p>
      
      <div className="mt-4">
        <h2 className="text-lg font-medium mb-2">Welcome to your dashboard</h2>
        <p className="text-gray-600">
          This is where you'll see your projects, tasks, and important updates.
        </p>
      </div>

      <div className="mt-6">
        <h3 className="text-md font-medium mb-2">Quick Actions</h3>
        <div className="flex gap-2">
          <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
            View Projects
          </button>
          <button className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
            Contact Support
          </button>
        </div>
      </div>

      <button 
        className="mt-4 underline" 
        onClick={() => window.location.href = "/logout"}
      >
        Logout
      </button>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\ClientDash.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Dashboard.jsx
TYPE: .jsx
================================================================================

import { useUser } from '../context/UserContext'

const Dashboard = () => {
  const { email, role } = useUser()

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold gradient-text mb-2">Client Dashboard</h1>
          <p className="text-subtext">Welcome back, {email}</p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="glass p-6 rounded-xl2">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-subtext text-sm">Active Projects</p>
                <p className="text-3xl font-bold text-white">3</p>
              </div>
              <div className="w-12 h-12 bg-blue-500/20 rounded-xl flex items-center justify-center">
                <svg className="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
            </div>
          </div>

          <div className="glass p-6 rounded-xl2">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-subtext text-sm">Pending Tasks</p>
                <p className="text-3xl font-bold text-white">12</p>
              </div>
              <div className="w-12 h-12 bg-yellow-500/20 rounded-xl flex items-center justify-center">
                <svg className="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
          </div>

          <div className="glass p-6 rounded-xl2">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-subtext text-sm">Completed</p>
                <p className="text-3xl font-bold text-white">28</p>
              </div>
              <div className="w-12 h-12 bg-green-500/20 rounded-xl flex items-center justify-center">
                <svg className="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
          </div>
        </div>

        {/* Recent Activity */}
        <div className="glass p-6 rounded-xl2">
          <h2 className="text-xl font-semibold text-white mb-4">Recent Activity</h2>
          <div className="space-y-4">
            <div className="flex items-center space-x-4 p-4 bg-white/5 rounded-xl">
              <div className="w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
              </div>
              <div className="flex-1">
                <p className="font-medium text-white">New project created</p>
                <p className="text-sm text-subtext">Website redesign project started</p>
              </div>
              <span className="text-sm text-subtext">2 hours ago</span>
            </div>

            <div className="flex items-center space-x-4 p-4 bg-white/5 rounded-xl">
              <div className="w-10 h-10 bg-green-500/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="flex-1">
                <p className="font-medium text-white">Task completed</p>
                <p className="text-sm text-subtext">Homepage mockup approved</p>
              </div>
              <span className="text-sm text-subtext">1 day ago</span>
            </div>

            <div className="flex items-center space-x-4 p-4 bg-white/5 rounded-xl">
              <div className="w-10 h-10 bg-yellow-500/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-5 5v-5z" />
                </svg>
              </div>
              <div className="flex-1">
                <p className="font-medium text-white">Feedback received</p>
                <p className="text-sm text-subtext">New comments on design proposal</p>
              </div>
              <span className="text-sm text-subtext">3 days ago</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Dashboard


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Dashboard.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Home.jsx
TYPE: .jsx
================================================================================

import { useRef } from 'react'
import { Link } from 'react-router-dom'

function Home() {
  const aboutRef = useRef(null);
  const whatWeOfferRef = useRef(null);
  const caseStudiesRef = useRef(null);
  const testimonialRef = useRef(null);
  const portalRef = useRef(null);

  const whatWeOffer = {
    services: ['Management & Operations', 'Process Improvement', 'HR & Workforce Optimization', 'Financial Acumen', 'Technology & Systems Integration'],
    industries: ['Healthcare', 'E-commerce & Retail', 'Service-Based Businesses', 'Manufacturing'],
    expertise: ['Strategic Planning', 'Business Process Re-engineering', 'Change Management', 'Data Analysis & Reporting']
  };

  const achievements = [
    { number: '500+', text: 'Clients & Partners' },
    { number: '20+', text: 'Years Experience' },
    { number: '80+', text: 'Solutions & Processes' },
  ];

  const caseStudies = [
    { id: 1, title: 'Operational Workflow Overhaul', summary: 'Integrated finance and tech workflows, cutting process time by 40%.' },
    { id: 2, title: 'HR Tech Implementation', summary: 'Deployed an HRIS that boosted onboarding efficiency by 60%.' },
    { id: 3, title: 'Reporting Automation', summary: 'Automated financial reports, saving 200 man-hours per quarter.' },
    { id: 4, title: 'Process Mapping & Optimization', summary: 'Uncovered $250K in annual savings through comprehensive mapping.' },
  ];

  const testimonial = {
    quote: "Cody is the best, Cody didn't just get the job done, they found and corrected other issues along the way proactively. Huge savings and potential from the start.",
    author: "Nick Pecoraro, Director at MSIL"
  };

  return (
    <div className="min-h-screen relative overflow-hidden bg-white">
      {/* Background effects */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-20 w-72 h-72 bg-blue-500/5 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob"></div>
        <div className="absolute top-40 right-20 w-72 h-72 bg-purple-500/5 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000"></div>
        <div className="absolute -bottom-8 left-40 w-72 h-72 bg-cyan-500/5 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-4000"></div>
      </div>

      {/* Hero Section with QiAlly Branding */}
      <section className="relative z-10 min-h-screen flex items-center justify-center px-4">
        <div className="container mx-auto text-center">
          <div className="max-w-4xl mx-auto">
            {/* Logo */}
            <div className="w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl2 flex items-center justify-center mx-auto mb-8 p-4">
                              <img src="https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png" alt="QiAlly Logo" className="w-full h-full object-contain" />
            </div>
            
            {/* Main Headline */}
            <h1 className="text-5xl md:text-7xl font-bold mb-6">
              <span className="gradient-text">QiAlly™</span>
            </h1>
            
            {/* Tagline */}
            <p className="text-2xl md:text-3xl text-gray-700 mb-4 font-light">
              Systems That Breathe
            </p>
            
            {/* Short line */}
            <p className="text-lg text-gray-600 mb-12 max-w-2xl mx-auto">
              The QiSuite™ Portal is live. The full site launches soon.
            </p>
            
            {/* CTA Buttons */}
            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-16">
              <Link 
                to="/login" 
                className="btn btn-primary btn-lg px-8"
              >
                Access Portal
              </Link>
              <a 
                href="mailto:info@qially.me" 
                className="btn btn-ghost btn-lg px-8"
              >
                Join the Waitlist
              </a>
            </div>
            
            {/* Trust Indicators */}
            <div className="flex justify-center items-center space-x-8">
              <div className="flex items-center space-x-2 text-gray-500">
                <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                <span className="text-sm">Secure</span>
              </div>
              <div className="flex items-center space-x-2 text-gray-500">
                <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
                <span className="text-sm">Fast</span>
              </div>
              <div className="flex items-center space-x-2 text-gray-500">
                <div className="w-3 h-3 bg-cyan-500 rounded-full"></div>
                <span className="text-sm">Reliable</span>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* About Section */}
      <section ref={aboutRef} className="relative z-10 py-20 px-4">
        <div className="container mx-auto">
          <div className="max-w-4xl mx-auto text-center">
            <h2 className="text-4xl md:text-5xl font-bold mb-8 gradient-text">About QiAlly</h2>
            <p className="text-xl text-gray-700 mb-8 leading-relaxed">
              We transform chaos into clarity. Through modular systems, client portals, and operational revival, 
              we help businesses breathe easier and operate more efficiently.
            </p>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mt-12">
              {achievements.map((achievement, index) => (
                <div key={index} className="glass p-6 rounded-xl2">
                  <div className="text-3xl font-bold gradient-text mb-2">{achievement.number}</div>
                  <div className="text-gray-600">{achievement.text}</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* What We Offer Section */}
      <section ref={whatWeOfferRef} className="relative z-10 py-20 px-4 bg-gray-50">
        <div className="container mx-auto">
          <div className="max-w-6xl mx-auto">
            <h2 className="text-4xl md:text-5xl font-bold mb-12 text-center gradient-text">What We Offer</h2>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Services */}
              <div className="glass p-8 rounded-xl2">
                <h3 className="text-2xl font-bold mb-6 text-gray-800">Services</h3>
                <ul className="space-y-3">
                  {whatWeOffer.services.map((service, index) => (
                    <li key={index} className="flex items-center space-x-3">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span className="text-gray-700">{service}</span>
                    </li>
                  ))}
                </ul>
              </div>
              
              {/* Industries */}
              <div className="glass p-8 rounded-xl2">
                <h3 className="text-2xl font-bold mb-6 text-gray-800">Industries</h3>
                <ul className="space-y-3">
                  {whatWeOffer.industries.map((industry, index) => (
                    <li key={index} className="flex items-center space-x-3">
                      <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                      <span className="text-gray-700">{industry}</span>
                    </li>
                  ))}
                </ul>
              </div>
              
              {/* Expertise */}
              <div className="glass p-8 rounded-xl2">
                <h3 className="text-2xl font-bold mb-6 text-gray-800">Expertise</h3>
                <ul className="space-y-3">
                  {whatWeOffer.expertise.map((expertise, index) => (
                    <li key={index} className="flex items-center space-x-3">
                      <div className="w-2 h-2 bg-cyan-500 rounded-full"></div>
                      <span className="text-gray-700">{expertise}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Case Studies Section */}
      <section ref={caseStudiesRef} className="relative z-10 py-20 px-4">
        <div className="container mx-auto">
          <div className="max-w-6xl mx-auto">
            <h2 className="text-4xl md:text-5xl font-bold mb-12 text-center gradient-text">Case Studies</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {caseStudies.map((study) => (
                <div key={study.id} className="glass p-8 rounded-xl2 hover:shadow-xl transition-all duration-300">
                  <h3 className="text-xl font-bold mb-4 text-gray-800">{study.title}</h3>
                  <p className="text-gray-600">{study.summary}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Testimonial Section */}
      <section ref={testimonialRef} className="relative z-10 py-20 px-4 bg-gray-50">
        <div className="container mx-auto">
          <div className="max-w-4xl mx-auto text-center">
            <div className="glass p-12 rounded-xl2">
              <blockquote className="text-2xl md:text-3xl text-gray-700 mb-6 italic">
                "{testimonial.quote}"
              </blockquote>
              <cite className="text-lg text-gray-600 font-semibold">
                — {testimonial.author}
              </cite>
            </div>
          </div>
        </div>
      </section>

      {/* Contact Section */}
      <section ref={portalRef} className="relative z-10 py-20 px-4">
        <div className="container mx-auto">
          <div className="max-w-4xl mx-auto text-center">
            <h2 className="text-4xl md:text-5xl font-bold mb-8 gradient-text">Ready to Get Started?</h2>
            <p className="text-xl text-gray-700 mb-12">
              Access your portal or get in touch to learn how we can help transform your operations.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
              <Link 
                to="/login" 
                className="btn btn-primary btn-lg px-8"
              >
                Access Portal
              </Link>
              <a 
                href="mailto:info@qially.me" 
                className="btn btn-ghost btn-lg px-8"
              >
                Contact Us
              </a>
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

export default Home


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Home.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\KB.jsx
TYPE: .jsx
================================================================================

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { getUserClients, isStaticKBAvailable, getClientKBUrl } from '../lib/staticKbApi';
import { listDocs, getSignedUrl, getClientSlug } from '../lib/kbApi';

export default function KB() {
  const [userClients, setUserClients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [staticKBAvailable, setStaticKBAvailable] = useState(false);
  const [legacyClientSlug, setLegacyClientSlug] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    async function loadData() {
      try {
        setLoading(true);
        
        // Check if static KB is available
        const staticAvailable = await isStaticKBAvailable();
        setStaticKBAvailable(staticAvailable);
        
        if (staticAvailable) {
          // Load user's accessible clients
          const clients = await getUserClients();
          setUserClients(clients);
        } else {
          // Fallback to legacy system
          const slug = await getClientSlug();
          setLegacyClientSlug(slug);
        }
      } catch (error) {
        console.error('Error loading KB data:', error);
      } finally {
        setLoading(false);
      }
    }
    
    loadData();
  }, []);

  const handleClientSelect = (clientSlug) => {
    if (staticKBAvailable) {
      // Open static KB in new tab
      window.open(getClientKBUrl(clientSlug), '_blank');
    }
  };

  const handleLegacyAccess = () => {
    if (legacyClientSlug) {
      // Use existing KB implementation
      // This could redirect to a legacy KB component or show a message
      console.log('Using legacy KB for client:', legacyClientSlug);
    }
  };

  if (loading) {
    return (
      <div className="flex min-h-[calc(100vh-80px)] items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading knowledge base...</p>
        </div>
      </div>
    );
  }

  if (staticKBAvailable && userClients.length === 0) {
    return (
      <div className="flex min-h-[calc(100vh-80px)] items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No Access</h3>
          <p className="text-gray-600">You don't have access to any knowledge bases.</p>
          <p className="text-gray-500 text-sm mt-2">Contact your administrator to request access.</p>
        </div>
      </div>
    );
  }

  if (!staticKBAvailable && !legacyClientSlug) {
    return (
      <div className="flex min-h-[calc(100vh-80px)] items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Knowledge Base Unavailable</h3>
          <p className="text-gray-600">The knowledge base system is currently being updated.</p>
          <p className="text-gray-500 text-sm mt-2">Please try again later or contact support.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-[calc(100vh-80px)] p-6">
      <div className="max-w-4xl mx-auto">
        <header className="mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">Knowledge Base</h1>
          <p className="text-gray-300">
            {staticKBAvailable 
              ? 'Select an organization to access their knowledge base'
              : 'Access your organization\'s knowledge base'
            }
          </p>
        </header>

        {staticKBAvailable ? (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {userClients.map(client => (
              <div 
                key={client.slug}
                className="bg-gray-800 rounded-lg p-6 hover:bg-gray-700 transition-colors cursor-pointer border border-gray-700 hover:border-blue-500"
                onClick={() => handleClientSelect(client.slug)}
              >
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-semibold text-white">{client.name}</h3>
                  <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </div>
                {client.description && (
                  <p className="text-gray-300 text-sm mb-4">{client.description}</p>
                )}
                <div className="flex items-center text-blue-400 text-sm">
                  <span>Click to access</span>
                  <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h3 className="text-xl font-semibold text-white">Legacy Knowledge Base</h3>
                <p className="text-gray-300 text-sm">Client: {legacyClientSlug}</p>
              </div>
              <button
                onClick={handleLegacyAccess}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                Access KB
              </button>
            </div>
            <p className="text-gray-400 text-sm">
              This is using the legacy knowledge base system. The new static knowledge base will be available soon.
            </p>
          </div>
        )}

        {staticKBAvailable && (
          <div className="mt-8 p-4 bg-blue-900/20 border border-blue-500/30 rounded-lg">
            <div className="flex items-start">
              <svg className="w-5 h-5 text-blue-400 mt-0.5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <div>
                <h4 className="text-blue-400 font-medium mb-1">New Static Knowledge Base</h4>
                <p className="text-blue-300 text-sm">
                  Knowledge bases now open in a new tab for better performance and user experience. 
                  Each organization has its own dedicated knowledge base with search and navigation features.
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\KB.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Login.jsx
TYPE: .jsx
================================================================================

// src/pages/Login.jsx
import { useState } from 'react'
import { useUser } from '../context/UserContext'
import { useNavigate } from 'react-router-dom'

export default function Login() {
  const [isSignUp, setIsSignUp] = useState(false)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const { signIn, signUp, testMode } = useUser()
  const navigate = useNavigate()

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      if (isSignUp) {
        const { data, error } = await signUp(email, password)
        if (error) throw error
        setError('Check your email for the confirmation link!')
      } else {
        const { data, error } = await signIn(email, password)
        if (error) throw error
        navigate('/client')
      }
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4">
      <div className="max-w-md w-full">
        <div className="text-center mb-8">
          <img src="https://vwqkhjnkummwtvfxgqml.supabase.co/storage/v1/object/public/site_assets/logo/qially/qcircleiconsquare.png" alt="QiAlly" className="h-12 w-12 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900">
            {isSignUp ? 'Create your account' : 'Sign in to your account'}
          </h2>
          <p className="text-gray-600 mt-2">
            {isSignUp ? 'Get started with QiAlly' : 'Welcome back to QiAlly'}
          </p>
          {testMode && (
            <div className="mt-2 px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs font-medium inline-block">
              🧪 Test Mode Active
            </div>
          )}
          {/* Debug info - remove in production */}
          <div className="mt-2 text-xs text-gray-500">
            Supabase URL: {import.meta.env.VITE_SUPABASE_URL ? '✅ Set' : '❌ Missing'}
            <br />
            Supabase Key: {import.meta.env.VITE_SUPABASE_ANON_KEY ? '✅ Set' : '❌ Missing'}
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email address
              </label>
              <input
                id="email"
                type="email"
                required
                autoComplete="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter your email"
              />
            </div>
            
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                id="password"
                type="password"
                required
                autoComplete={isSignUp ? "new-password" : "current-password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter your password"
              />
              {testMode && (
                <p className="mt-1 text-xs text-gray-500">Any password works in test mode</p>
              )}
            </div>

            {error && (
              <div className="rounded-md bg-red-50 p-4">
                <div className="text-sm text-red-700">{error}</div>
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <div className="flex items-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  {isSignUp ? 'Creating account...' : 'Signing in...'}
        </div>
              ) : (
                isSignUp ? 'Create account' : 'Sign in'
              )}
            </button>
          </form>

          <div className="mt-6 text-center">
        <button
              type="button"
              className="text-sm text-blue-600 hover:text-blue-500"
          onClick={() => {
                setIsSignUp(!isSignUp)
                setError('')
          }}
        >
              {isSignUp ? 'Already have an account? Sign in' : "Don't have an account? Sign up"}
        </button>
          </div>

          <div className="mt-6 pt-6 border-t border-gray-200">
            <div className="text-center">
              <p className="text-xs text-gray-500 mb-3">🧪 Test Accounts (Any password):</p>
              <div className="space-y-2 text-xs">
                <div className="flex justify-between">
                  <span className="text-gray-600">👑 Admin:</span>
                  <span className="font-mono text-gray-800">admin@qially.me</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">👑 Admin:</span>
                  <span className="font-mono text-gray-800">crice4485@gmail.com</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">👤 Client:</span>
                  <span className="font-mono text-gray-800">info@qially.me</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">👤 Client:</span>
                  <span className="font-mono text-gray-800">client1@email.com</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Login.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Logout.jsx
TYPE: .jsx
================================================================================

import { useEffect } from 'react';
import { useUser } from '../context/UserContext';
import { useNavigate } from 'react-router-dom';

export default function Logout() {
  const { signOut } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    const performLogout = async () => {
      console.log('Performing logout...');
      try {
        const result = await signOut();
        if (result.error) {
          console.error('Supabase logout error:', result.error);
        }
        console.log('Logout completed, navigating to home');
        navigate('/');
      } catch (error) {
        console.error('Logout error:', error);
        // Force navigation even if there's an error
        navigate('/');
      }
    };

    performLogout();
  }, [signOut, navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
        <p className="mt-2 text-gray-600">Signing out...</p>
      </div>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Logout.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Messages.jsx
TYPE: .jsx
================================================================================

import { useState, useEffect, useRef } from 'react';
import { useUser } from '../context/UserContext';
import { 
  getConversations, 
  getMessages, 
  sendMessage, 
  createConversation,
  subscribeToMessages,
  subscribeToConversations,
  markConversationAsRead
} from '../lib/messagesApi';

export default function Messages() {
  const { email, role } = useUser();
  const [conversations, setConversations] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [activeTab, setActiveTab] = useState('all');
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [showNewConversation, setShowNewConversation] = useState(false);
  const [newConversationTitle, setNewConversationTitle] = useState('');
  const messagesEndRef = useRef(null);

  // Load conversations on component mount
  useEffect(() => {
    loadConversations();
  }, []);

  // Subscribe to real-time updates
  useEffect(() => {
    const conversationsSubscription = subscribeToConversations((payload) => {
      if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE') {
        loadConversations();
      }
    });

    return () => {
      conversationsSubscription?.unsubscribe();
    };
  }, []);

  // Subscribe to messages for selected conversation
  useEffect(() => {
    if (!selectedConversation) return;

    const messagesSubscription = subscribeToMessages(selectedConversation.id, (payload) => {
      if (payload.eventType === 'INSERT') {
        loadMessages(selectedConversation.id);
      }
    });

    return () => {
      messagesSubscription?.unsubscribe();
    };
  }, [selectedConversation]);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const loadConversations = async () => {
    try {
      setLoading(true);
      const data = await getConversations();
      setConversations(data);
    } catch (error) {
      console.error('Error loading conversations:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadMessages = async (conversationId) => {
    try {
      const data = await getMessages(conversationId);
      setMessages(data);
      
      // Mark conversation as read
      await markConversationAsRead(conversationId);
    } catch (error) {
      console.error('Error loading messages:', error);
    }
  };

  const handleConversationSelect = async (conversation) => {
    setSelectedConversation(conversation);
    await loadMessages(conversation.id);
  };

  const teamMembers = [
    { id: 1, name: 'Cody', role: 'Project Manager', avatar: 'CD', online: true },
    { id: 2, name: 'Sarah', role: 'Process Specialist', avatar: 'SM', online: true },
    { id: 3, name: 'Mike', role: 'Technical Lead', avatar: 'MT', online: false },
    { id: 4, name: 'John', role: 'Support Specialist', avatar: 'JS', online: true },
    { id: 5, name: 'Support Team', role: 'General Support', avatar: 'ST', online: true }
  ];

  const filteredConversations = conversations.filter(conv => {
    if (activeTab === 'all') return true;
    // For now, we'll show all conversations since we don't have unread/status fields yet
    return true;
  });

  const formatTime = (timestamp) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = (now - date) / (1000 * 60 * 60);
    
    if (diffInHours < 1) return 'Just now';
    if (diffInHours < 24) return `${Math.floor(diffInHours)}h ago`;
    if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}d ago`;
    return date.toLocaleDateString();
  };

  const handleSendMessage = async () => {
    if (!newMessage.trim() || !selectedConversation) return;
    
    try {
      setSending(true);
      await sendMessage(selectedConversation.id, newMessage.trim());
      setNewMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
      alert('Failed to send message. Please try again.');
    } finally {
      setSending(false);
    }
  };

  const handleCreateConversation = async () => {
    if (!newConversationTitle.trim()) return;
    
    try {
      setSending(true);
      const conversation = await createConversation(newConversationTitle.trim());
      setNewConversationTitle('');
      setShowNewConversation(false);
      await loadConversations();
      handleConversationSelect(conversation);
    } catch (error) {
      console.error('Error creating conversation:', error);
      alert('Failed to create conversation. Please try again.');
    } finally {
      setSending(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Messages</h1>
              <p className="text-gray-600">Communicate with your QiAlly team</p>
            </div>
            <div className="flex items-center space-x-4">
              <button className="btn btn-ghost">Help</button>
              <button 
                onClick={() => setShowNewConversation(true)}
                className="btn btn-primary"
              >
                New Conversation
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Sidebar */}
          <div className="lg:col-span-1">
            {/* Filter Tabs */}
            <div className="bg-white rounded-xl shadow-sm border p-4 mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Conversations</h3>
              <div className="space-y-2">
                {[
                  { id: 'all', name: 'All', count: conversations.length },
                  { id: 'unread', name: 'Unread', count: conversations.filter(c => c.unread).length },
                  { id: 'active', name: 'Active', count: conversations.filter(c => c.status === 'active').length },
                  { id: 'resolved', name: 'Resolved', count: conversations.filter(c => c.status === 'resolved').length }
                ].map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`w-full flex items-center justify-between px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                      activeTab === tab.id
                        ? 'bg-blue-100 text-blue-700'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    <span>{tab.name}</span>
                    <span className="bg-gray-200 text-gray-700 px-2 py-1 rounded-full text-xs">
                      {tab.count}
                    </span>
                  </button>
                ))}
              </div>
            </div>

            {/* Conversations List */}
            <div className="bg-white rounded-xl shadow-sm border p-4">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Conversations</h3>
              {loading ? (
                <div className="text-center py-4">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
                </div>
              ) : conversations.length === 0 ? (
                <div className="text-center py-4 text-gray-500">
                  <p>No conversations yet</p>
                  <button 
                    onClick={() => setShowNewConversation(true)}
                    className="text-blue-600 hover:text-blue-800 text-sm mt-2"
                  >
                    Start a conversation
                  </button>
                </div>
              ) : (
                <div className="space-y-2">
                  {filteredConversations.map((conversation) => (
                    <div
                      key={conversation.id}
                      onClick={() => handleConversationSelect(conversation)}
                      className={`p-3 rounded-lg cursor-pointer transition-colors ${
                        selectedConversation?.id === conversation.id
                          ? 'bg-blue-100 border border-blue-200'
                          : 'hover:bg-gray-50'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex-1 min-w-0">
                          <h4 className="text-sm font-medium text-gray-900 truncate">
                            {conversation.title}
                          </h4>
                          <p className="text-xs text-gray-500 truncate">
                            {conversation.participants?.length || 0} participants
                          </p>
                        </div>
                        <span className="text-xs text-gray-400">
                          {formatTime(conversation.updated_at)}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3">
            {selectedConversation ? (
              <div className="bg-white rounded-xl shadow-sm border h-[600px] flex flex-col">
                {/* Conversation Header */}
                <div className="p-4 border-b">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <button
                        onClick={() => setSelectedConversation(null)}
                        className="lg:hidden p-2 text-gray-400 hover:text-gray-600"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                        </svg>
                      </button>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">{selectedConversation.title}</h3>
                        <p className="text-sm text-gray-500">
                          {selectedConversation.participants.join(', ')}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button className="p-2 text-gray-400 hover:text-gray-600">
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                      </button>
                      <button className="p-2 text-gray-400 hover:text-gray-600">
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>

                {/* Messages */}
                <div className="flex-1 overflow-y-auto p-4 space-y-4">
                  {messages.map((message) => {
                    const isOwnMessage = message.sender_id === selectedConversation?.created_by;
                    return (
                      <div
                        key={message.id}
                        className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}
                      >
                        <div
                          className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                            isOwnMessage
                              ? 'bg-blue-600 text-white'
                              : 'bg-gray-100 text-gray-900'
                          }`}
                        >
                          <p className="text-sm">{message.content}</p>
                          <p className={`text-xs mt-1 ${
                            isOwnMessage ? 'text-blue-100' : 'text-gray-500'
                          }`}>
                            {formatTime(message.created_at)}
                          </p>
                        </div>
                      </div>
                    );
                  })}
                  <div ref={messagesEndRef} />
                </div>

                {/* Message Input */}
                <div className="p-4 border-t">
                  <div className="flex space-x-3">
                    <input
                      type="text"
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                      placeholder="Type your message..."
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                    <button
                      onClick={handleSendMessage}
                      disabled={!newMessage.trim()}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      Send
                    </button>
                  </div>
                </div>
              </div>
            ) : (
              <div className="bg-white rounded-xl shadow-sm border p-6">
                <div className="text-center">
                  <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Select a conversation</h3>
                  <p className="text-gray-600">Choose a conversation from the sidebar to start messaging</p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Conversation List (Mobile) */}
        <div className="lg:hidden mt-6">
          <div className="bg-white rounded-xl shadow-sm border">
            <div className="p-4 border-b">
              <h3 className="text-lg font-semibold text-gray-900">Recent Conversations</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {filteredConversations.map((conversation) => (
                <div
                  key={conversation.id}
                  onClick={() => setSelectedConversation(conversation)}
                  className="p-4 hover:bg-gray-50 cursor-pointer"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center space-x-2">
                        <h4 className="text-sm font-medium text-gray-900 truncate">
                          {conversation.title}
                        </h4>
                        {conversation.unread && (
                          <div className="w-2 h-2 bg-blue-600 rounded-full"></div>
                        )}
                      </div>
                      <p className="text-sm text-gray-500 truncate">{conversation.lastMessage}</p>
                    </div>
                    <span className="text-xs text-gray-400">{conversation.lastMessageTime}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Messages.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\MindMap.jsx
TYPE: .jsx
================================================================================

import React from 'react';
import GraphView from '../components/GraphView.jsx';


export default function MindMap() {
const clientSlug = 'builtbyrays'; // TODO: derive from logged-in user’s membership
const openDoc = (id) => {
// id looks like: builtbyrays/path/to/note
const slug = id.replace(/^.*?\//, '');
window.location.href = `/kb/${clientSlug}/${slug}`;
};
return (
<div className="container mx-auto p-4">
<h1 className="text-2xl font-semibold mb-2">Knowledge Graph</h1>
<p className="opacity-70 mb-4">Explore connections between notes. Click a node to open the document.</p>
<GraphView clientSlug={clientSlug} onOpenDoc={openDoc} />
</div>
);
}

================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\MindMap.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\NotFound.jsx
TYPE: .jsx
================================================================================

import { Link } from 'react-router-dom'

function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-white">
      {/* Background effects */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-20 w-72 h-72 bg-blue-500/10 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob"></div>
        <div className="absolute top-40 right-20 w-72 h-72 bg-purple-500/10 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000"></div>
        <div className="absolute -bottom-8 left-40 w-72 h-72 bg-cyan-500/10 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-4000"></div>
      </div>

      <div className="relative z-10 text-center">
        <div className="w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl2 flex items-center justify-center mx-auto mb-6 glow">
          <span className="text-white text-3xl font-bold">404</span>
        </div>

        <h1 className="text-4xl md:text-6xl font-bold gradient-text mb-4">Page Not Found</h1>
        <p className="text-lg text-subtext mb-8 max-w-md mx-auto">
          The page you're looking for doesn't exist or has been moved.
        </p>

        <Link
          to="/"
          className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-xl2 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 glow-hover"
        >
          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          Go Home
        </Link>
      </div>
    </div>
  )
}

export default NotFound


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\NotFound.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Projects.jsx
TYPE: .jsx
================================================================================

import { useState } from 'react';
import { useUser } from '../context/UserContext';

export default function Projects() {
  const { email, role } = useUser();
  const [selectedProject, setSelectedProject] = useState(null);
  const [view, setView] = useState('grid'); // grid or list

  const projects = [
    {
      id: 1,
      name: 'Process Optimization',
      description: 'Streamlining operational workflows to improve efficiency and reduce costs.',
      status: 'In Progress',
      progress: 75,
      dueDate: '2024-02-15',
      priority: 'High',
      team: ['Cody', 'Sarah', 'John'],
      budget: '$25,000',
      tasks: [
        { id: 1, name: 'Current state analysis', completed: true },
        { id: 2, name: 'Process mapping', completed: true },
        { id: 3, name: 'Implementation planning', completed: false },
        { id: 4, name: 'Training and rollout', completed: false }
      ]
    },
    {
      id: 2,
      name: 'System Integration',
      description: 'Connecting disparate systems to create a unified data flow.',
      status: 'Planning',
      progress: 25,
      dueDate: '2024-03-01',
      priority: 'Medium',
      team: ['Cody', 'Mike'],
      budget: '$15,000',
      tasks: [
        { id: 1, name: 'Requirements gathering', completed: true },
        { id: 2, name: 'Technical assessment', completed: false },
        { id: 3, name: 'Integration design', completed: false },
        { id: 4, name: 'Testing and deployment', completed: false }
      ]
    },
    {
      id: 3,
      name: 'Workflow Automation',
      description: 'Automating repetitive tasks to free up staff for higher-value work.',
      status: 'Completed',
      progress: 100,
      dueDate: '2024-01-20',
      priority: 'Low',
      team: ['Cody'],
      budget: '$10,000',
      tasks: [
        { id: 1, name: 'Process identification', completed: true },
        { id: 2, name: 'Automation design', completed: true },
        { id: 3, name: 'Implementation', completed: true },
        { id: 4, name: 'Testing and validation', completed: true }
      ]
    }
  ];

  const getStatusColor = (status) => {
    switch (status) {
      case 'Completed': return 'bg-green-100 text-green-800';
      case 'In Progress': return 'bg-blue-100 text-blue-800';
      case 'Planning': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'High': return 'bg-red-100 text-red-800';
      case 'Medium': return 'bg-yellow-100 text-yellow-800';
      case 'Low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Projects</h1>
              <p className="text-gray-600">Manage and track your projects</p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => setView('grid')}
                  className={`p-2 rounded ${view === 'grid' ? 'bg-blue-100 text-blue-600' : 'text-gray-400'}`}
                >
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                  </svg>
                </button>
                <button
                  onClick={() => setView('list')}
                  className={`p-2 rounded ${view === 'list' ? 'bg-blue-100 text-blue-600' : 'text-gray-400'}`}
                >
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
              <button className="btn btn-primary">New Project</button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {view === 'grid' ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {projects.map((project) => (
              <div key={project.id} className="bg-white rounded-xl p-6 shadow-sm border hover:shadow-md transition-shadow">
                <div className="flex justify-between items-start mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">{project.name}</h3>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(project.status)}`}>
                    {project.status}
                  </span>
                </div>
                
                <p className="text-gray-600 text-sm mb-4">{project.description}</p>
                
                <div className="mb-4">
                  <div className="flex justify-between text-sm text-gray-600 mb-1">
                    <span>Progress</span>
                    <span>{project.progress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${project.progress}%` }}
                    ></div>
                  </div>
                </div>

                <div className="flex items-center justify-between text-sm text-gray-600 mb-4">
                  <span>Due: {project.dueDate}</span>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(project.priority)}`}>
                    {project.priority}
                  </span>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex -space-x-2">
                    {project.team.slice(0, 3).map((member, index) => (
                      <div key={index} className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center border-2 border-white">
                        <span className="text-xs font-medium text-blue-600">{member[0]}</span>
                      </div>
                    ))}
                    {project.team.length > 3 && (
                      <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center border-2 border-white">
                        <span className="text-xs font-medium text-gray-600">+{project.team.length - 3}</span>
                      </div>
                    )}
                  </div>
                  <button 
                    onClick={() => setSelectedProject(project)}
                    className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                  >
                    View Details
                  </button>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due Date</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Team</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {projects.map((project) => (
                  <tr key={project.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900">{project.name}</div>
                        <div className="text-sm text-gray-500">{project.description}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(project.status)}`}>
                        {project.status}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                          <div 
                            className="bg-blue-600 h-2 rounded-full"
                            style={{ width: `${project.progress}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-gray-900">{project.progress}%</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{project.dueDate}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(project.priority)}`}>
                        {project.priority}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex -space-x-2">
                        {project.team.slice(0, 3).map((member, index) => (
                          <div key={index} className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center border-2 border-white">
                            <span className="text-xs font-medium text-blue-600">{member[0]}</span>
                          </div>
                        ))}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button 
                        onClick={() => setSelectedProject(project)}
                        className="text-blue-600 hover:text-blue-900"
                      >
                        View
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Project Detail Modal */}
      {selectedProject && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900">{selectedProject.name}</h3>
              <button 
                onClick={() => setSelectedProject(null)}
                className="text-gray-400 hover:text-gray-600"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="space-y-4">
              <p className="text-gray-600">{selectedProject.description}</p>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Status</label>
                  <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(selectedProject.status)}`}>
                    {selectedProject.status}
                  </span>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Priority</label>
                  <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(selectedProject.priority)}`}>
                    {selectedProject.priority}
                  </span>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Due Date</label>
                  <p className="text-sm text-gray-900">{selectedProject.dueDate}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Budget</label>
                  <p className="text-sm text-gray-900">{selectedProject.budget}</p>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Tasks</label>
                <div className="space-y-2">
                  {selectedProject.tasks.map((task) => (
                    <div key={task.id} className="flex items-center space-x-3">
                      <input 
                        type="checkbox" 
                        checked={task.completed}
                        readOnly
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span className={`text-sm ${task.completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                        {task.name}
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <button 
                  onClick={() => setSelectedProject(null)}
                  className="btn btn-ghost"
                >
                  Close
                </button>
                <button className="btn btn-primary">
                  Edit Project
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Projects.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Settings.jsx
TYPE: .jsx
================================================================================

import { useState, useEffect } from 'react';
import { useUser } from '../context/UserContext';
import { supabase } from '../lib/supabase';

export default function Settings() {
  const { email, role } = useUser();
  const [activeTab, setActiveTab] = useState('profile');
  const [loading, setLoading] = useState(false);
  const [saveStatus, setSaveStatus] = useState('');
  
  const [notifications, setNotifications] = useState({
    email: true,
    sms: false,
    projectUpdates: true,
    messages: true,
    systemAlerts: false
  });

  const [profile, setProfile] = useState({
    full_name: '',
    preferred_locale: 'en',
    timezone: 'America/New_York',
    email_opt_in: true,
    sms_opt_in: false
  });

  // Load profile data from Supabase on component mount
  useEffect(() => {
    if (email) {
      loadProfile();
    }
  }, [email]);

  const loadProfile = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('email', email)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        console.error('Error loading profile:', error);
        return;
      }

      if (data) {
        setProfile({
          full_name: data.full_name || (email ? email.split('@')[0] : ''),
          preferred_locale: data.preferred_locale || 'en',
          timezone: data.timezone || 'America/New_York',
          email_opt_in: data.email_opt_in ?? true,
          sms_opt_in: data.sms_opt_in ?? false
        });
      } else {
        // Set default values if no profile exists
        setProfile({
          full_name: email ? email.split('@')[0] : '',
          preferred_locale: 'en',
          timezone: 'America/New_York',
          email_opt_in: true,
          sms_opt_in: false
        });
      }
    } catch (error) {
      console.error('Error loading profile:', error);
    } finally {
      setLoading(false);
    }
  };

  const saveProfile = async () => {
    try {
      setLoading(true);
      setSaveStatus('');

      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        setSaveStatus('Error: User not authenticated');
        return;
      }

      const profileData = {
        id: user.id,
        email: email,
        full_name: profile.full_name,
        preferred_locale: profile.preferred_locale,
        timezone: profile.timezone,
        email_opt_in: profile.email_opt_in,
        sms_opt_in: profile.sms_opt_in
      };

      // Try to update existing profile, if not exists then insert
      const { error: updateError } = await supabase
        .from('profiles')
        .upsert(profileData, { onConflict: 'id' });

      if (updateError) {
        console.error('Error saving profile:', updateError);
        setSaveStatus('Error saving profile. Please try again.');
        return;
      }

      setSaveStatus('Profile saved successfully!');
      setTimeout(() => setSaveStatus(''), 3000); // Clear success message after 3 seconds
    } catch (error) {
      console.error('Error saving profile:', error);
      setSaveStatus('Error saving profile. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const timezones = [
    { value: 'America/New_York', label: 'Eastern Time (ET)' },
    { value: 'America/Chicago', label: 'Central Time (CT)' },
    { value: 'America/Denver', label: 'Mountain Time (MT)' },
    { value: 'America/Los_Angeles', label: 'Pacific Time (PT)' },
    { value: 'UTC', label: 'UTC' }
  ];

  const locales = [
    { value: 'en', label: 'English' },
    { value: 'es', label: 'Spanish' },
    { value: 'fr', label: 'French' },
    { value: 'de', label: 'German' }
  ];

  const handleNotificationChange = (key) => {
    if (key === 'email') {
      setProfile(prev => ({
        ...prev,
        email_opt_in: !prev.email_opt_in
      }));
    } else if (key === 'sms') {
      setProfile(prev => ({
        ...prev,
        sms_opt_in: !prev.sms_opt_in
      }));
    } else {
      setNotifications(prev => ({
        ...prev,
        [key]: !prev[key]
      }));
    }
  };

  const handleProfileChange = (key, value) => {
    setProfile(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const renderProfile = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Profile Information</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
            <input 
              type="text" 
              value={profile.full_name}
              onChange={(e) => handleProfileChange('full_name', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Preferred Locale</label>
            <select 
              value={profile.preferred_locale}
              onChange={(e) => handleProfileChange('preferred_locale', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {locales.map(locale => (
                <option key={locale.value} value={locale.value}>{locale.label}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input 
              type="email" 
              value={email} 
              disabled
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Timezone</label>
            <select 
              value={profile.timezone}
              onChange={(e) => handleProfileChange('timezone', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {timezones.map(tz => (
                <option key={tz.value} value={tz.value}>{tz.label}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Email Notifications</label>
            <button
              onClick={() => handleNotificationChange('email')}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                profile.email_opt_in ? 'bg-blue-600' : 'bg-gray-200'
              }`}
            >
              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${
                profile.email_opt_in ? 'translate-x-6' : 'translate-x-1'
              }`}></span>
            </button>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">SMS Notifications</label>
            <button
              onClick={() => handleNotificationChange('sms')}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                profile.sms_opt_in ? 'bg-blue-600' : 'bg-gray-200'
              }`}
            >
              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${
                profile.sms_opt_in ? 'translate-x-6' : 'translate-x-1'
              }`}></span>
            </button>
          </div>
        </div>
        <div className="mt-6">
          <button 
            onClick={saveProfile}
            disabled={loading}
            className="btn btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? 'Saving...' : 'Save Changes'}
          </button>
          {saveStatus && (
            <div className={`mt-3 p-3 rounded-md text-sm ${
              saveStatus.includes('Error') 
                ? 'bg-red-50 text-red-700 border border-red-200' 
                : 'bg-green-50 text-green-700 border border-green-200'
            }`}>
              {saveStatus}
            </div>
          )}
        </div>
      </div>

      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Account Information</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <input 
              type="text" 
              value={role} 
              disabled
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Account Created</label>
            <input 
              type="text" 
              value="January 2024" 
              disabled
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
            />
          </div>
        </div>
      </div>
    </div>
  );

  const renderNotifications = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Notification Preferences</h3>
        <div className="space-y-4">
          {Object.entries(notifications).map(([key, value]) => (
            <div key={key} className="flex items-center justify-between">
              <div>
                <p className="font-medium text-gray-900 capitalize">
                  {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                </p>
                <p className="text-sm text-gray-600">
                  {key === 'email' && 'Receive updates via email'}
                  {key === 'sms' && 'Receive urgent updates via SMS'}
                  {key === 'projectUpdates' && 'Get notified about project progress'}
                  {key === 'messages' && 'Receive message notifications'}
                  {key === 'systemAlerts' && 'Get system maintenance alerts'}
                </p>
              </div>
              <button
                onClick={() => handleNotificationChange(key)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  value ? 'bg-blue-600' : 'bg-gray-200'
                }`}
              >
                <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${
                  value ? 'translate-x-6' : 'translate-x-1'
                }`}></span>
              </button>
            </div>
          ))}
        </div>
        <div className="mt-6">
          <button className="btn btn-primary">Save Preferences</button>
        </div>
      </div>

      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Email Frequency</h3>
        <div className="space-y-4">
          <div className="flex items-center space-x-3">
            <input type="radio" id="daily" name="frequency" className="text-blue-600" />
            <label htmlFor="daily" className="text-sm font-medium text-gray-900">Daily digest</label>
          </div>
          <div className="flex items-center space-x-3">
            <input type="radio" id="weekly" name="frequency" className="text-blue-600" defaultChecked />
            <label htmlFor="weekly" className="text-sm font-medium text-gray-900">Weekly summary</label>
          </div>
          <div className="flex items-center space-x-3">
            <input type="radio" id="monthly" name="frequency" className="text-blue-600" />
            <label htmlFor="monthly" className="text-sm font-medium text-gray-900">Monthly report</label>
          </div>
        </div>
      </div>
    </div>
  );

  const renderSecurity = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Password</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Current Password</label>
            <input 
              type="password" 
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">New Password</label>
            <input 
              type="password" 
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Confirm New Password</label>
            <input 
              type="password" 
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>
        <div className="mt-6">
          <button className="btn btn-primary">Change Password</button>
        </div>
      </div>

      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Two-Factor Authentication</h3>
        <p className="text-gray-600 mb-4">Add an extra layer of security to your account.</p>
        <button className="btn btn-outline">Enable 2FA</button>
      </div>

      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Active Sessions</h3>
        <div className="space-y-3">
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div>
              <p className="font-medium text-gray-900">Current Session</p>
              <p className="text-sm text-gray-600">Chrome on Windows • {new Date().toLocaleDateString()}</p>
            </div>
            <span className="text-sm text-green-600 font-medium">Active</span>
          </div>
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div>
              <p className="font-medium text-gray-900">Mobile Session</p>
              <p className="text-sm text-gray-600">Safari on iPhone • 2 days ago</p>
            </div>
            <button className="text-sm text-red-600 hover:text-red-800">Revoke</button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderBilling = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Current Plan</h3>
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-6 text-white">
          <h4 className="text-xl font-bold mb-2">Professional Plan</h4>
          <p className="opacity-90 mb-4">Full access to all features and priority support</p>
          <div className="flex items-center justify-between">
            <span className="text-2xl font-bold">$99/month</span>
            <button className="btn btn-white">Change Plan</button>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Billing Information</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Card Number</label>
            <input 
              type="text" 
              value="•••• •••• •••• 4242" 
              disabled
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Expiry Date</label>
              <input 
                type="text" 
                value="12/25" 
                disabled
                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">CVC</label>
              <input 
                type="text" 
                value="•••" 
                disabled
                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
              />
            </div>
          </div>
        </div>
        <div className="mt-6">
          <button className="btn btn-outline">Update Payment Method</button>
        </div>
      </div>

      <div className="bg-white rounded-xl p-6 shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Billing History</h3>
        <div className="space-y-3">
          <div className="flex items-center justify-between p-3 border rounded-lg">
            <div>
              <p className="font-medium text-gray-900">January 2024</p>
              <p className="text-sm text-gray-600">Professional Plan</p>
            </div>
            <div className="text-right">
              <p className="font-medium text-gray-900">$99.00</p>
              <p className="text-sm text-green-600">Paid</p>
            </div>
          </div>
          <div className="flex items-center justify-between p-3 border rounded-lg">
            <div>
              <p className="font-medium text-gray-900">December 2023</p>
              <p className="text-sm text-gray-600">Professional Plan</p>
            </div>
            <div className="text-right">
              <p className="font-medium text-gray-900">$99.00</p>
              <p className="text-sm text-green-600">Paid</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Settings</h1>
              <p className="text-gray-600">Manage your account preferences</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-sm border p-4">
              <nav className="space-y-2">
                {[
                  { id: 'profile', name: 'Profile', icon: 'M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z' },
                  { id: 'notifications', name: 'Notifications', icon: 'M15 17h5l-5 5v-5zM4.19 4.47A.75.75 0 014.47 4.19L9 8.72V15a.75.75 0 001.5 0V8.72l4.53 4.53a.75.75 0 11-1.06 1.06L9.75 9.78V15a.75.75 0 01-1.5 0V9.78L4.69 15.53a.75.75 0 11-1.06-1.06L4.19 4.47z' },
                  { id: 'security', name: 'Security', icon: 'M9 12.75L11.25 15 15 9.75m-3-7.036A11.959 11.959 0 013.598 6 11.99 11.99 0 003 9.749c0 5.592 3.824 10.29 9 11.623 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.285z' },
                  { id: 'billing', name: 'Billing', icon: 'M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 002.25-2.25V6.75A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25v10.5A2.25 2.25 0 004.5 19.5z' }
                ].map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                      activeTab === tab.id
                        ? 'bg-blue-100 text-blue-700'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={tab.icon} />
                    </svg>
                    <span>{tab.name}</span>
                  </button>
                ))}
              </nav>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3">
            {activeTab === 'profile' && renderProfile()}
            {activeTab === 'notifications' && renderNotifications()}
            {activeTab === 'security' && renderSecurity()}
            {activeTab === 'billing' && renderBilling()}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Settings.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\pages\Support.jsx
TYPE: .jsx
================================================================================

import React, { useState, useEffect } from 'react';
import { useUser } from '../context/UserContext';

export default function Support() {
  const { email, role } = useUser();
  const [activeTab, setActiveTab] = useState('tickets');
  const [tickets, setTickets] = useState([
    {
      id: 'TKT-001',
      title: 'Login issues with new interface',
      status: 'open',
      priority: 'high',
      category: 'Technical',
      created: '2024-01-15',
      lastUpdate: '2 hours ago'
    },
    {
      id: 'TKT-002',
      title: 'Billing question about subscription',
      status: 'in-progress',
      priority: 'medium',
      category: 'Billing',
      created: '2024-01-14',
      lastUpdate: '1 day ago'
    },
    {
      id: 'TKT-003',
      title: 'Feature request: Dark mode',
      status: 'closed',
      priority: 'low',
      category: 'Feature Request',
      created: '2024-01-10',
      lastUpdate: '3 days ago'
    }
  ]);

  const tabs = [
    { id: 'tickets', name: 'My Tickets', icon: '🎫' },
    { id: 'new-ticket', name: 'New Ticket', icon: '➕' },
    { id: 'faq', name: 'FAQ', icon: '❓' },
    { id: 'contact', name: 'Contact', icon: '📞' }
  ];

  const getStatusColor = (status) => {
    switch (status) {
      case 'open': return 'bg-red-100 text-red-800';
      case 'in-progress': return 'bg-yellow-100 text-yellow-800';
      case 'closed': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Support Center</h1>
          <p className="mt-2 text-gray-600">Get help with your account, billing, and technical issues</p>
        </div>

        {/* Tab Navigation */}
        <div className="mb-8">
          <nav className="flex space-x-8">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 px-3 py-2 rounded-lg font-medium transition-colors ${
                  activeTab === tab.id
                    ? 'bg-blue-100 text-blue-700'
                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                }`}
              >
                <span>{tab.icon}</span>
                <span>{tab.name}</span>
              </button>
            ))}
          </nav>
        </div>

        {/* Tab Content */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          {activeTab === 'tickets' && (
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">My Support Tickets</h2>
                <button 
                  onClick={() => setActiveTab('new-ticket')}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Create New Ticket
                </button>
              </div>
              
              <div className="space-y-4">
                {tickets.map((ticket) => (
                  <div key={ticket.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-2">
                          <h3 className="font-medium text-gray-900">{ticket.title}</h3>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(ticket.status)}`}>
                            {ticket.status}
                          </span>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(ticket.priority)}`}>
                            {ticket.priority}
                          </span>
                        </div>
                        <div className="flex items-center space-x-4 text-sm text-gray-600">
                          <span>#{ticket.id}</span>
                          <span>•</span>
                          <span>{ticket.category}</span>
                          <span>•</span>
                          <span>Created {ticket.created}</span>
                          <span>•</span>
                          <span>Updated {ticket.lastUpdate}</span>
                        </div>
                      </div>
                      <button className="text-blue-600 hover:text-blue-800">
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'new-ticket' && (
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">Create New Support Ticket</h2>
              
              <form className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Subject
                  </label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Brief description of your issue"
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Category
                    </label>
                    <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                      <option>Technical Issue</option>
                      <option>Billing Question</option>
                      <option>Feature Request</option>
                      <option>Account Access</option>
                      <option>General Inquiry</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Priority
                    </label>
                    <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                      <option>Low</option>
                      <option>Medium</option>
                      <option>High</option>
                      <option>Critical</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Description
                  </label>
                  <textarea
                    rows={6}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Please provide detailed information about your issue..."
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Attachments
                  </label>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                      <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth={2} strokeLinecap="round" strokeLinejoin="round" />
                    </svg>
                    <p className="mt-1 text-sm text-gray-600">
                      <button type="button" className="font-medium text-blue-600 hover:text-blue-500">
                        Upload files
                      </button>
                      {' '}or drag and drop
                    </p>
                    <p className="text-xs text-gray-500">PNG, JPG, PDF up to 10MB</p>
                  </div>
                </div>

                <div className="flex justify-end space-x-4">
                  <button
                    type="button"
                    onClick={() => setActiveTab('tickets')}
                    className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Submit Ticket
                  </button>
                </div>
              </form>
            </div>
          )}

          {activeTab === 'faq' && (
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">Frequently Asked Questions</h2>
              
              <div className="space-y-4">
                {[
                  {
                    question: 'How do I reset my password?',
                    answer: 'You can reset your password by clicking the "Forgot Password" link on the login page. You\'ll receive an email with instructions to create a new password.'
                  },
                  {
                    question: 'How do I update my billing information?',
                    answer: 'Go to Settings > Billing to update your payment methods and billing address. You can also download invoices and manage your subscription there.'
                  },
                  {
                    question: 'What are the system requirements?',
                    answer: 'Our platform works on all modern browsers including Chrome, Firefox, Safari, and Edge. We recommend using the latest version for the best experience.'
                  },
                  {
                    question: 'How do I invite team members?',
                    answer: 'Admins can invite team members by going to the Admin panel and using the "Invite User" feature. Invitees will receive an email with setup instructions.'
                  }
                ].map((faq, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg">
                    <button className="w-full px-4 py-3 text-left font-medium text-gray-900 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset">
                      {faq.question}
                    </button>
                    <div className="px-4 pb-3">
                      <p className="text-gray-600">{faq.answer}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'contact' && (
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">Contact Support</h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Get in Touch</h3>
                  
                  <div className="space-y-4">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">Email Support</p>
                        <p className="text-sm text-gray-600">support@qially.com</p>
                        <p className="text-xs text-gray-500">Response within 24 hours</p>
                      </div>
                    </div>

                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">Phone Support</p>
                        <p className="text-sm text-gray-600">+1 (555) 123-4567</p>
                        <p className="text-xs text-gray-500">Mon-Fri 9AM-6PM EST</p>
                      </div>
                    </div>

                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                        </svg>
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">Live Chat</p>
                        <p className="text-sm text-gray-600">Available 24/7</p>
                        <p className="text-xs text-gray-500">Instant response</p>
                      </div>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Quick Contact Form</h3>
                  
                  <form className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Name
                      </label>
                      <input
                        type="text"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Email
                      </label>
                      <input
                        type="email"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Message
                      </label>
                      <textarea
                        rows={4}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                    
                    <button
                      type="submit"
                      className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      Send Message
                    </button>
                  </form>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\pages\Support.jsx
================================================================================


================================================================================
FILE: D:\qiportal-dev\qiportal-client\src\utils\auth.js
TYPE: .js
================================================================================

import { supabase } from '../lib/supabase';

/**
 * Get user email from Supabase session
 * @returns {Promise<string|null>} User email or null if not authenticated
 */
export async function getUserEmailFromSession() {
  const { data: { session } } = await supabase.auth.getSession();
  return session?.user?.email || null;
}

/**
 * Check if user is authenticated
 * @returns {Promise<boolean>} True if user is authenticated
 */
export async function isAuthenticated() {
  const { data: { session } } = await supabase.auth.getSession();
  return !!session?.user;
}

/**
 * Get user role based on email
 * @param {string} email - User email
 * @returns {string} User role (admin, client, or guest)
 */
export function getUserRole(email) {
  if (!email) return 'guest';
  
  const admins = ["admin@qially.me", "crice4485@gmail.com"];
  const clients = ["info@qially.me", "client1@email.com"];
  
  if (admins.includes(email)) return "admin";
  if (clients.includes(email)) return "client";
  return "guest";
}

/**
 * Force clear all authentication data
 * This is a nuclear option to clear all auth state
 */
export function forceClearAuth() {
  // Clear Supabase session
  localStorage.removeItem('supabase.auth.token');
  sessionStorage.removeItem('supabase.auth.token');
  
  // Clear any other potential auth storage
  localStorage.removeItem('sb-vwqkhjnkummwtvfxgqml-auth-token');
  sessionStorage.removeItem('sb-vwqkhjnkummwtvfxgqml-auth-token');
  
  // Clear all localStorage items that might contain auth data
  Object.keys(localStorage).forEach(key => {
    if (key.includes('supabase') || key.includes('auth')) {
      localStorage.removeItem(key);
    }
  });
  
  // Clear all sessionStorage items that might contain auth data
  Object.keys(sessionStorage).forEach(key => {
    if (key.includes('supabase') || key.includes('auth')) {
      sessionStorage.removeItem(key);
    }
  });
  
  console.log('Force cleared all authentication data');
}


================================================================================
END OF FILE: D:\qiportal-dev\qiportal-client\src\utils\auth.js
================================================================================


================================================================================
EXTRACTION COMPLETE
Total files processed: 61
Output saved to: D:\qiportal-dev\qiportal-client\code_extraction_2025-08-29_17-26-14.txt
================================================================================
